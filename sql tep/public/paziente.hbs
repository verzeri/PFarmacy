<!DOCTYPE html>
<html lang="it">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PFarmacy - Area Paziente</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.js"></script>
    <style>
        :root {
            --primary-color: #5E72E4;
            --primary-dark: #324CDD;
            --primary-light: #E8ECF9;
            --secondary-color: #2DCE89;
            --accent-color: #FF6F91;
            --light-gray: #f7fafc;
            --border-color: #edf2f7;
            --text-dark: #2D3748;
            --text-muted: #718096;
            --shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.05);
            --shadow-md: 0 4px 12px rgba(0, 0, 0, 0.08);
            --shadow-lg: 0 8px 24px rgba(0, 0, 0, 0.12);
            --border-radius: 14px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: var(--light-gray);
            color: var(--text-dark);
            line-height: 1.6;
            padding-bottom: 40px;
        }

        /* Header Styling */
        .main-header {
            background: linear-gradient(90deg, var(--primary-color), var(--primary-dark));
            color: white;
            padding: 1.2rem 2.5rem;
            box-shadow: var(--shadow-md);
            position: relative;
        }

        .main-header .container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1400px;
            margin: 0 auto;
        }

        .logo {
            font-size: 1.8rem;
            font-weight: 700;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .logo i {
            font-size: 1.6rem;
            color: #FFF;
            background: rgba(255, 255, 255, 0.15);
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        .user-profile {
            display: flex;
            align-items: center;
            gap: 1.2rem;
            background: rgba(255, 255, 255, 0.1);
            padding: 8px 16px;
            border-radius: 50px;
            backdrop-filter: blur(5px);
        }

        .profile-info {
            text-align: right;
        }

        .profile-name {
            font-weight: 600;
            font-size: 1.1rem;
            margin-bottom: 0.2rem;
        }

        .profile-status {
            font-size: 0.85rem;
            opacity: 0.85;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .profile-avatar {
            width: 48px;
            height: 48px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            position: relative;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
            border: 2px solid rgba(255, 255, 255, 0.4);
        }

        /* Logout Button Styling - Versione migliorata */
        .logout-btn {
            margin-left: 14px;
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.2), rgba(255, 255, 255, 0.1));
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 50px;
            color: white;
            padding: 9px 18px;
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 0.95rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
            position: relative;
            overflow: hidden;
            text-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .logout-btn:before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0));
            transform: translateY(100%);
            transition: transform 0.3s ease;
            z-index: -1;
        }

        .logout-btn:hover {
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.25), rgba(255, 255, 255, 0.15));
            transform: translateY(-3px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
        }

        .logout-btn:hover:before {
            transform: translateY(0);
        }

        .logout-btn:active {
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.12);
        }

        .logout-btn i {
            font-size: 1.1rem;
            transition: transform 0.3s ease;
        }

        .logout-btn:hover i {
            transform: translateX(3px);
        }

        .logout-btn span {
            transition: all 0.3s ease;
        }

        .logout-btn:hover span {
            letter-spacing: 0.5px;
        }

        @media (max-width: 768px) {
            .logout-btn {
                margin-left: 0;
                margin-top: 10px;
                width: 100%;
                justify-content: center;
                padding: 10px;
            }
        }

        /* Main Navigation */
        .main-nav {
            background: white;
            box-shadow: var(--shadow-sm);
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .nav-container {
            max-width: 1400px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.8rem 2.5rem;
        }

        .nav-links {
            display: flex;
            gap: 2rem;
            list-style: none;
        }

        .nav-links a {
            text-decoration: none;
            color: var(--text-dark);
            font-weight: 500;
            font-size: 0.95rem;
            position: relative;
            padding: 0.5rem 0;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .nav-links a i {
            font-size: 1.1rem;
            color: var(--primary-color);
        }

        .nav-links a:hover {
            color: var(--primary-color);
        }

        .nav-links a::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 0;
            height: 2px;
            background: var(--primary-color);
            transition: width 0.3s;
        }

        .nav-links a:hover::after {
            width: 100%;
        }

        .nav-links a.active {
            color: var(--primary-color);
        }

        .nav-links a.active::after {
            width: 100%;
        }

        .nav-actions {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .notification-bell {
            position: relative;
            font-size: 1.2rem;
            color: var(--text-muted);
            cursor: pointer;
            transition: all 0.2s;
        }

        .notification-bell:hover {
            color: var(--primary-color);
        }

        .notification-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background: var(--accent-color);
            color: white;
            font-size: 0.6rem;
            width: 16px;
            height: 16px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }

        /* Main Content */
        .main-content {
            max-width: 1400px;
            margin: 30px auto;
            padding: 0 2.5rem;
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 2rem;
        }

        .section-title {
            margin-bottom: 1.2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .section-title h2 {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--text-dark);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .section-title h2 i {
            color: var(--primary-color);
        }

        /* Dashboard Cards */
        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .dashboard-card {
            background: white;
            border-radius: var(--border-radius);
            padding: 1.5rem;
            box-shadow: var(--shadow-sm);
            transition: all 0.3s ease;
            border: 1px solid var(--border-color);
            position: relative;
            overflow: hidden;
        }

        .dashboard-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-md);
            border-color: var(--primary-light);
        }

        .dashboard-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 5px;
            height: 100%;
            background: var(--primary-color);
            transform: scaleY(0);
            transform-origin: bottom;
            transition: transform 0.3s;
        }

        .dashboard-card:hover::before {
            transform: scaleY(1);
        }

        .dashboard-card:nth-child(2)::before {
            background: var(--secondary-color);
        }

        .dashboard-card:nth-child(3)::before {
            background: var(--accent-color);
        }

        .dashboard-card-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1.2rem;
        }

        .dashboard-card-title {
            font-weight: 600;
            color: var(--text-dark);
            font-size: 1.1rem;
        }

        .dashboard-card-icon {
            width: 50px;
            height: 50px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.4rem;
            box-shadow: var(--shadow-sm);
            background: var(--primary-light);
            color: var(--primary-color);
        }

        .dashboard-card:nth-child(2) .dashboard-card-icon {
            background: #E6F9F1;
            color: var(--secondary-color);
        }

        .dashboard-card:nth-child(3) .dashboard-card-icon {
            background: #FFE6EB;
            color: var(--accent-color);
        }

        .dashboard-card-content {
            font-size: 0.95rem;
            color: var(--text-muted);
            margin-bottom: 1.2rem;
            line-height: 1.5;
        }

        .dashboard-card-footer {
            font-size: 0.9rem;
            color: var(--primary-color);
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            padding: 0.5rem 0;
        }

        .dashboard-card:nth-child(2) .dashboard-card-footer {
            color: var(--secondary-color);
        }

        .dashboard-card:nth-child(3) .dashboard-card-footer {
            color: var(--accent-color);
        }

        .dashboard-card-footer:hover {
            gap: 0.8rem;
        }

        /* Calendar Styling */
        .calendar-container {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-sm);
            padding: 1.5rem;
            margin-bottom: 2rem;
            border: 1px solid var(--border-color);
        }

        .fc .fc-toolbar-title {
            font-size: 1.3rem;
            color: var(--text-dark);
            font-weight: 600;
        }

        .fc .fc-button-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            box-shadow: none;
            text-transform: uppercase;
            font-size: 0.8rem;
            font-weight: 600;
            padding: 0.5rem 1rem;
            transition: all 0.2s;
        }

        .fc .fc-button-primary:hover {
            background-color: var(--primary-dark);
            border-color: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .fc .fc-daygrid-day.fc-day-today {
            background-color: var(--primary-light);
        }

        .fc .fc-event {
            background-color: var(--primary-color);
            border: none;
            border-radius: 6px;
            padding: 3px 8px;
            font-size: 0.85rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            transition: all 0.2s;
        }

        .fc .fc-event:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .fc .fc-col-header-cell {
            background-color: var(--light-gray);
            padding: 0.8rem 0;
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.85rem;
        }

        .fc-day-sat,
        .fc-day-sun {
            background-color: #f9fafb;
        }

        .fc-theme-standard td,
        .fc-theme-standard th {
            border-color: var(--border-color);
        }

        /* Sidebar Styling */
        .sidebar {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--border-color);
            overflow: hidden;
            position: sticky;
            top: 100px;
        }

        .sidebar-section {
            padding: 1.5rem;
            border-bottom: 1px solid var(--border-color);
        }

        .sidebar-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .sidebar-title i {
            color: var(--primary-color);
        }

        /* Health Stats */
        .health-stats {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }

        .health-stat-item {
            padding: 1rem;
            background: var(--light-gray);
            border-radius: 10px;
            text-align: center;
        }

        .health-stat-value {
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 0.2rem;
        }

        .health-stat-label {
            font-size: 0.85rem;
            color: var(--text-muted);
        }

        /* Recent Activity */
        .activity-list {
            list-style: none;
        }

        .activity-item {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border-color);
        }

        .activity-item:last-child {
            margin-bottom: 0;
            padding-bottom: 0;
            border-bottom: none;
        }

        .activity-icon {
            width: 36px;
            height: 36px;
            background: var(--primary-light);
            color: var(--primary-color);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1rem;
            flex-shrink: 0;
        }

        .activity-details {
            flex: 1;
        }

        .activity-title {
            font-weight: 500;
            margin-bottom: 0.2rem;
            font-size: 0.95rem;
        }

        .activity-time {
            font-size: 0.8rem;
            color: var(--text-muted);
        }

        /* Chat Styling */
        #chatWindow {
            display: none;
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 380px;
            height: 500px;
            background: white;
            border-radius: 16px;
            box-shadow: var(--shadow-lg);
            display: flex;
            flex-direction: column;
            overflow: hidden;
            z-index: 1000;
            transition: all 0.3s ease;
            border: 1px solid var(--border-color);
        }

        #chatHeader {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            background: linear-gradient(90deg, var(--primary-color), var(--primary-dark));
            color: white;
        }

        #chatHeader h3 {
            margin: 0;
            font-size: 1.1rem;
            font-weight: 600;
        }

        #chatHeader .chat-recipient {
            display: flex;
            align-items: center;
            gap: 0.8rem;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 1.1rem;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        #closeChat {
            background: none;
            border: none;
            color: white;
            font-size: 1.2rem;
            cursor: pointer;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: all 0.2s;
        }

        #closeChat:hover {
            background-color: rgba(255, 255, 255, 0.2);
        }

        #chatBody {
            flex: 1;
            padding: 1.2rem;
            overflow-y: auto;
            background-color: #f3f4f6;
            display: flex;
            flex-direction: column;
            gap: 0.8rem;
            background-image:
                radial-gradient(rgba(94, 114, 228, 0.03) 2px, transparent 2px),
                radial-gradient(rgba(94, 114, 228, 0.03) 2px, transparent 2px);
            background-size: 30px 30px;
            background-position: 0 0, 15px 15px;
        }

        #chatBody::-webkit-scrollbar {
            width: 6px;
        }

        #chatBody::-webkit-scrollbar-track {
            background: transparent;
        }

        #chatBody::-webkit-scrollbar-thumb {
            background: #cbd5e1;
            border-radius: 10px;
        }

        #chatBody::-webkit-scrollbar-thumb:hover {
            background: #94a3b8;
        }

        .message {
            max-width: 80%;
            padding: 0.8rem 1rem;
            border-radius: 16px;
            word-wrap: break-word;
            font-size: 0.95rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
            line-height: 1.4;
            animation: fadeIn 0.3s ease-in-out;
            position: relative;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(5px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .message.sent {
            background: linear-gradient(to bottom right, var(--primary-color), var(--primary-dark));
            color: white;
            align-self: flex-end;
            border-bottom-right-radius: 4px;
        }

        .message.received {
            background-color: white;
            color: var(--text-dark);
            align-self: flex-start;
            border-bottom-left-radius: 4px;
        }

        .message-timestamp {
            font-size: 0.7rem;
            margin-top: 0.3rem;
            text-align: right;
            opacity: 0.7;
        }

        .message.sent .message-timestamp {
            color: rgba(255, 255, 255, 0.8);
        }

        .message.received .message-timestamp {
            color: var(--text-muted);
        }

        #chatFooter {
            padding: 1rem;
            background-color: white;
            border-top: 1px solid var(--border-color);
            display: flex;
            align-items: center;
            gap: 0.8rem;
        }

        #chatInput {
            flex: 1;
            padding: 0.8rem 1rem;
            border: 1px solid var(--border-color);
            border-radius: 24px;
            outline: none;
            font-size: 0.95rem;
            transition: all 0.3s;
            background-color: var(--light-gray);
        }

        #chatInput:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(94, 114, 228, 0.1);
            background-color: white;
        }

        #sendMessage {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
            color: white;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
            transition: all 0.3s;
            box-shadow: 0 2px 6px rgba(94, 114, 228, 0.3);
        }

        #sendMessage:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(94, 114, 228, 0.4);
        }

        #chatBadge {
            position: absolute;
            top: -5px;
            right: -5px;
            background-color: var(--accent-color);
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.7rem;
            font-weight: bold;
            display: none;
        }

        #chatIcon {
            position: relative;
            cursor: pointer;
        }

        .message.system {
            background-color: #f1f5f9;
            color: var(--text-muted);
            align-self: center;
            text-align: center;
            font-style: italic;
            font-size: 0.85rem;
            border-radius: 10px;
            padding: 0.7rem 1rem;
            max-width: 90%;
            border: 1px solid #e2e8f0;
        }

        .chat-actions {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-top: 0.6rem;
        }

        .chat-action-btn {
            background: var(--primary-light);
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.85rem;
            cursor: pointer;
            color: var(--primary-color);
            font-weight: 500;
            transition: all 0.2s;
        }

        .chat-action-btn:hover {
            background: rgba(94, 114, 228, 0.15);
            transform: translateY(-1px);
        }

        .typing-indicator {
            display: flex;
            align-items: center;
            font-size: 0.85rem;
            gap: 0.2rem;
        }

        .typing-indicator span {
            animation: typingDot 1.4s infinite;
            font-size: 1.4rem;
            line-height: 0.1;
            margin: 0 1px;
        }

        .typing-indicator span:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-indicator span:nth-child(3) {
            animation-delay: 0.4s;
        }

        @keyframes typingDot {

            0%,
            60%,
            100% {
                transform: translateY(0);
                opacity: 0.6;
            }

            30% {
                transform: translateY(-4px);
                opacity: 1;
            }
        }

        /* Floating chat button */
        .chat-float-btn {
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 60px;
            height: 60px;
            background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
            color: white;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 1.5rem;
            box-shadow: var(--shadow-lg);
            cursor: pointer;
            z-index: 999;
            transition: all 0.3s ease;
        }

        .chat-float-btn:hover {
            transform: scale(1.05) translateY(-5px);
            box-shadow: 0 8px 25px rgba(94, 114, 228, 0.25);
        }

        .chat-float-btn i {
            transition: all 0.3s ease;
        }

        .chat-float-btn:hover i {
            transform: translateY(-2px);
        }

        /* Visitor counter styling */
        .visitor-counter {
            position: fixed;
            top: 90px;
            right: 20px;
            background: white;
            color: var(--text-dark);
            padding: 0.6rem 1rem;
            border-radius: 30px;
            font-size: 0.85rem;
            display: flex;
            align-items: center;
            gap: 0.6rem;
            box-shadow: var(--shadow-md);
            z-index: 100;
            animation: fadeInDown 0.5s ease-out;
            border: 1px solid var(--border-color);
        }

        .visitor-counter i {
            font-size: 1rem;
            color: var(--primary-color);
            background: var(--primary-light);
            width: 28px;
            height: 28px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
        }

        .visitor-counter-number {
            font-weight: 600;
            transition: all 0.3s ease;
            color: var(--primary-color);
        }

        .visitor-pulse {
            animation: pulse 1.5s ease-out;
        }

        @keyframes pulse {
            0% {
                transform: scale(1);
            }

            50% {
                transform: scale(1.15);
            }

            100% {
                transform: scale(1);
            }
        }

        @keyframes fadeInDown {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Action button styling */
        .action-btn {
            background: var(--primary-color);
            color: white;
            border: none;
            padding: 0.7rem 1.2rem;
            border-radius: 50px;
            font-size: 0.9rem;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            cursor: pointer;
            transition: all 0.3s;
            box-shadow: 0 2px 5px rgba(94, 114, 228, 0.2);
        }

        .action-btn:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(94, 114, 228, 0.3);
        }

        /* Media queries */
        @media (max-width: 1200px) {
            .main-content {
                grid-template-columns: 1fr;
            }

            .sidebar {
                position: static;
            }

            .dashboard-grid {
                grid-template-columns: repeat(3, 1fr);
            }
        }

        @media (max-width: 992px) {
            .dashboard-grid {
                grid-template-columns: repeat(2, 1fr);
            }

            .nav-links {
                gap: 1.2rem;
            }
        }

        @media (max-width: 768px) {
            .main-header .container {
                flex-direction: column;
                gap: 1rem;
            }

            .user-profile {
                margin-top: 0.5rem;
                width: 100%;
                justify-content: center;
            }

            .dashboard-grid {
                grid-template-columns: 1fr;
            }

            .nav-container {
                padding: 0.8rem 1rem;
                overflow-x: auto;
            }

            .main-nav .nav-links {
                gap: 1rem;
                padding-bottom: 0.5rem;
            }

            .section-title {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.5rem;
            }
        }

        @media (max-width: 576px) {
            .main-content {
                padding: 0 1.5rem;
            }

            .main-header {
                padding: 1rem 1.5rem;
            }

            #chatWindow {
                width: 100%;
                height: 100%;
                bottom: 0;
                right: 0;
                border-radius: 0;
            }

            .chat-float-btn {
                bottom: 20px;
                right: 20px;
                width: 50px;
                height: 50px;
            }
        }

        /* Enhanced Professional Colors and Styling */
        :root {
            --primary-color: #3C76F2;
            /* Professional blue */
            --primary-dark: #2E5ED9;
            /* Darker blue */
            --primary-light: #EDF2FF;
            /* Light blue background */
            --secondary-color: #16A785;
            /* Teal green for secondary elements */
            --accent-color: #FF5A5F;
            /* Coral accent for notifications */
            --success-color: #10B981;
            /* Emerald green for success states */
            --warning-color: #FBBF24;
            /* Amber for warnings */
            --info-color: #60A5FA;
            /* Light blue for info */
            --light-gray: #F9FAFB;
            /* Very light gray background */
            --border-color: #E5E7EB;
            /* Subtle border color */
            --text-dark: #1F2937;
            /* Almost black text */
            --text-muted: #6B7280;
            /* Medium gray text */
            --shadow-sm: 0 2px 10px rgba(0, 0, 0, 0.04);
            --shadow-md: 0 4px 16px rgba(0, 0, 0, 0.06);
            --shadow-lg: 0 10px 30px rgba(0, 0, 0, 0.08);
            --border-radius: 16px;
            /* Increased border radius for modern look */
        }

        /* Horizontal Card Layout */
        .horizontal-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .horizontal-card {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-sm);
            display: flex;
            overflow: hidden;
            transition: all 0.3s ease;
            border: 1px solid var(--border-color);
        }

        .horizontal-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-md);
        }

        .card-icon-container {
            width: 100px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: var(--primary-light);
            padding: 1.5rem;
        }

        .card-icon-container i {
            font-size: 2rem;
            color: var(--primary-color);
        }

        .horizontal-card:nth-child(2) .card-icon-container {
            background: #E6F7F4;
        }

        .horizontal-card:nth-child(2) .card-icon-container i {
            color: var(--secondary-color);
        }

        .horizontal-card:nth-child(3) .card-icon-container {
            background: #FFF1F1;
        }

        .horizontal-card:nth-child(3) .card-icon-container i {
            color: var(--accent-color);
        }

        .card-content {
            padding: 1.5rem;
            flex: 1;
        }

        .card-title {
            font-weight: 600;
            font-size: 1.1rem;
            margin-bottom: 0.5rem;
            color: var(--text-dark);
        }

        .card-description {
            color: var(--text-muted);
            font-size: 0.95rem;
            margin-bottom: 1rem;
            line-height: 1.5;
        }

        .card-link {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: var(--primary-color);
            font-weight: 500;
            font-size: 0.9rem;
            text-decoration: none;
            transition: gap 0.2s ease;
        }

        .horizontal-card:nth-child(2) .card-link {
            color: var(--secondary-color);
        }

        .horizontal-card:nth-child(3) .card-link {
            color: var(--accent-color);
        }

        .card-link:hover {
            gap: 0.8rem;
        }

        /* Enhanced Navigation with Icons */
        .nav-links a {
            padding: 0.6rem 1rem;
            border-radius: 50px;
            transition: all 0.2s;
            background: transparent;
        }

        .nav-links a:hover,
        .nav-links a.active {
            background: var(--primary-light);
            color: var(--primary-color);
        }

        .nav-links a.active::after {
            display: none;
        }

        /* Modern Stats Displays */
        .stat-card {
            padding: 1.5rem;
            border-radius: var(--border-radius);
            background: white;
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--border-color);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-md);
        }

        .stat-card::after {
            content: '';
            position: absolute;
            bottom: 0;
            right: 0;
            width: 100px;
            height: 100px;
            background: var(--primary-light);
            border-radius: 50%;
            opacity: 0.3;
            transform: translate(30%, 30%);
            transition: all 0.3s ease;
        }

        .stat-card:hover::after {
            transform: translate(20%, 20%) scale(1.2);
        }

        .stat-icon {
            margin-bottom: 1.2rem;
            width: 50px;
            height: 50px;
            background: var(--primary-light);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.4rem;
            color: var(--primary-color);
        }

        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            color: var(--text-dark);
            position: relative;
            z-index: 1;
        }

        .stat-label {
            font-size: 0.95rem;
            color: var(--text-muted);
            position: relative;
            z-index: 1;
        }

        /* Professional Health Dashboard Items */
        .health-dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .health-metric {
            background: white;
            border-radius: var(--border-radius);
            padding: 1.5rem;
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--border-color);
            transition: all 0.3s ease;
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
        }

        .health-metric:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-md);
        }

        .metric-icon {
            width: 60px;
            height: 60px;
            background: var(--primary-light);
            color: var(--primary-color);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.6rem;
            margin-bottom: 1rem;
        }

        .health-metric:nth-child(2) .metric-icon {
            background: #E6F7F4;
            color: var(--secondary-color);
        }

        .health-metric:nth-child(3) .metric-icon {
            background: #FFF1F1;
            color: var(--accent-color);
        }

        .health-metric:nth-child(4) .metric-icon {
            background: #FEF9E7;
            color: var(--warning-color);
        }

        .metric-value {
            font-size: 2.2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            color: var(--primary-color);
        }

        .health-metric:nth-child(2) .metric-value {
            color: var(--secondary-color);
        }

        .health-metric:nth-child(3) .metric-value {
            color: var(--accent-color);
        }

        .health-metric:nth-child(4) .metric-value {
            color: var(--warning-color);
        }

        .metric-label {
            font-size: 1rem;
            color: var(--text-muted);
            margin-bottom: 0.8rem;
        }

        .metric-trend {
            font-size: 0.85rem;
            display: flex;
            align-items: center;
            gap: 0.3rem;
        }

        .trend-up {
            color: var(--success-color);
        }

        .trend-down {
            color: var(--accent-color);
        }

        /* Modern Timeline */
        .timeline {
            position: relative;
            padding-left: 2rem;
            margin: 0;
            list-style: none;
        }

        .timeline::before {
            content: '';
            position: absolute;
            top: 0;
            left: 6px;
            height: 100%;
            width: 2px;
            background: var(--border-color);
        }

        .timeline-item {
            position: relative;
            padding-bottom: 1.5rem;
        }

        .timeline-item:last-child {
            padding-bottom: 0;
        }

        .timeline-dot {
            position: absolute;
            left: -2rem;
            width: 16px;
            height: 16px;
            border-radius: 50%;
            background: white;
            border: 2px solid var(--primary-color);
            top: 0;
        }

        .timeline-content {
            background: white;
            border-radius: var(--border-radius);
            padding: 1.2rem;
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--border-color);
            margin-bottom: 0.5rem;
        }

        .timeline-date {
            font-size: 0.85rem;
            color: var(--text-muted);
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .timeline-title {
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--text-dark);
        }

        .timeline-description {
            color: var(--text-muted);
            font-size: 0.95rem;
        }

        /* Side Menu Improvements */
        .side-menu {
            border-radius: var(--border-radius);
            overflow: hidden;
            background: white;
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--border-color);
        }

        .side-menu-header {
            background: var(--primary-color);
            color: white;
            padding: 1.2rem;
        }

        .side-menu-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .side-menu-subtitle {
            font-size: 0.9rem;
            opacity: 0.8;
        }

        .side-menu-items {
            list-style: none;
        }

        .side-menu-item {
            border-bottom: 1px solid var(--border-color);
        }

        .side-menu-item:last-child {
            border-bottom: none;
        }

        .side-menu-link {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 1rem 1.2rem;
            text-decoration: none;
            color: var(--text-dark);
            transition: all 0.2s;
        }

        .side-menu-link:hover,
        .side-menu-link.active {
            background: var(--primary-light);
            color: var(--primary-color);
        }

        .side-menu-icon {
            font-size: 1.2rem;
            color: var(--primary-color);
        }

        /* Modern Appointment Card */
        .appointment-card {
            background: white;
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--border-color);
            transition: all 0.3s ease;
            margin-bottom: 1.5rem;
        }

        .appointment-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-md);
        }

        .appointment-header {
            padding: 1.5rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
            background: var(--primary-light);
            border-bottom: 1px solid var(--border-color);
        }

        .appointment-title {
            font-weight: 600;
            font-size: 1.1rem;
            color: var(--primary-color);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .appointment-title i {
            color: var(--primary-color);
        }

        .appointment-date {
            font-size: 0.9rem;
            color: var(--text-muted);
        }

        .appointment-body {
            padding: 1.5rem;
        }

        .appointment-doctor {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1.2rem;
        }

        .doctor-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: var(--primary-light);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            color: var(--primary-color);
        }

        .doctor-details {
            flex: 1;
        }

        .doctor-name {
            font-weight: 600;
            margin-bottom: 0.2rem;
            color: var(--text-dark);
        }

        .doctor-specialty {
            font-size: 0.9rem;
            color: var(--text-muted);
        }

        .appointment-details {
            margin-bottom: 1.2rem;
        }

        .detail-item {
            display: flex;
            align-items: center;
            gap: 0.8rem;
            margin-bottom: 0.8rem;
        }

        .detail-item:last-child {
            margin-bottom: 0;
        }

        .detail-icon {
            font-size: 1rem;
            color: var(--primary-color);
            width: 30px;
            height: 30px;
            background: var(--primary-light);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .detail-text {
            font-size: 0.95rem;
            color: var(--text-dark);
        }

        .appointment-actions {
            display: flex;
            gap: 1rem;
        }

        .appointment-btn {
            flex: 1;
            padding: 0.8rem;
            text-align: center;
            background: var(--primary-light);
            border: none;
            border-radius: 50px;
            color: var(--primary-color);
            font-weight: 500;
            font-size: 0.95rem;
            cursor: pointer;
            transition: all 0.2s;
        }

        .appointment-btn:hover {
            background: var(--primary-color);
            color: white;
        }

        .appointment-btn.cancel {
            background: #FFF1F1;
            color: var(--accent-color);
        }

        .appointment-btn.cancel:hover {
            background: var(--accent-color);
            color: white;
        }
    </style>
</head>

<body>
    <header class="main-header">
        <div class="container">
            <div class="logo">
                <i class="fas fa-clinic-medical"></i>
                <span>PFarmacy</span>
            </div>
            <div class="user-profile">
                <div class="profile-info">
                    <div class="profile-name" id="patientName">{{ patient.nome }} {{ patient.cognome }}</div>
                    <div class="profile-status">Area Paziente</div>
                </div>
                <div class="profile-avatar">
                    <i class="fas fa-user"></i>
                    <div id="chatIcon">
                        <span id="chatBadge">0</span>
                    </div>
                </div>
                <button class="logout-btn" id="logoutBtn" onclick="logout()">
                    <i class="fas fa-sign-out-alt"></i>
                    <span>Logout</span>
                </button>
            </div>
        </div>
    </header>

    <!-- Contatore visitatori in tempo reale -->
    <div class="visitor-counter">
        <i class="fas fa-users"></i>
        <span>Utenti online: <span id="visitorCount" class="visitor-counter-number">1</span></span>
    </div>

    <div class="main-content">
        <div class="dashboard-grid">
            <div class="dashboard-card">
                <div class="dashboard-card-header">
                    <div class="dashboard-card-title">Prossimo Appuntamento</div>
                    <div class="dashboard-card-icon">
                        <i class="fas fa-calendar-alt"></i>
                    </div>
                </div>
                <div class="dashboard-card-content">
                    La tua prossima visita è programmata per il 28 Marzo alle 15:30
                </div>
                <div class="dashboard-card-footer">
                    <i class="fas fa-clock"></i> Tra 5 giorni
                </div>
            </div>

            <div class="dashboard-card">
                <div class="dashboard-card-header">
                    <div class="dashboard-card-title">Prescrizioni attive</div>
                    <div class="dashboard-card-icon">
                        <i class="fas fa-prescription-bottle-alt"></i>
                    </div>
                </div>
                <div class="dashboard-card-content">
                    Hai 3 prescrizioni attive. La prossima scade il 15 Aprile.
                </div>
                <div class="dashboard-card-footer">
                    <i class="fas fa-pills"></i> Visualizza dettagli
                </div>
            </div>

            <div class="dashboard-card">
                <div class="dashboard-card-header">
                    <div class="dashboard-card-title">Messaggi non letti</div>
                    <div class="dashboard-card-icon">
                        <i class="fas fa-envelope"></i>
                    </div>
                </div>
                <div class="dashboard-card-content">
                    Hai 1 messaggio non letto dal tuo farmacista.
                </div>
                <div class="dashboard-card-footer">
                    <i class="fas fa-comment"></i> Apri chat
                </div>
            </div>
        </div>

        <div class="section-title">
            <h2>I tuoi appuntamenti</h2>
            <button class="chat-action-btn" id="newReminderBtn">
                <i class="fas fa-plus"></i> Nuovo Promemoria
            </button>
        </div>
        <!-- Modal per nuovo promemoria -->
        <div id="reminderModal"
            style="display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.4);">
            <div
                style="background-color: white; margin: 15% auto; padding: 20px; border-radius: var(--border-radius); box-shadow: var(--shadow-lg); width: 50%; max-width: 500px;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                    <h2 style="margin: 0; color: var(--primary-color);">Nuovo Promemoria</h2>
                    <span id="closeReminderModal" style="cursor: pointer; font-size: 1.5rem;">&times;</span>
                </div>
                <form id="reminderForm">
                    <div style="margin-bottom: 15px;">
                        <label for="reminderDate" style="display: block; margin-bottom: 5px; font-weight: 500;">Data e
                            ora:</label>
                        <input type="datetime-local" id="reminderDate" required
                            style="width: 100%; padding: 10px; border: 1px solid var(--border-color); border-radius: 8px;">
                    </div>
                    <div style="margin-bottom: 20px;">
                        <label for="reminderDescription"
                            style="display: block; margin-bottom: 5px; font-weight: 500;">Descrizione:</label>
                        <textarea id="reminderDescription" rows="3" required
                            style="width: 100%; padding: 10px; border: 1px solid var(--border-color); border-radius: 8px;"></textarea>
                    </div>
                    <div style="display: flex; justify-content: flex-end; gap: 10px;">
                        <button type="button" id="cancelReminder"
                            style="padding: 10px 15px; background: #f1f5f9; border: none; border-radius: 8px; cursor: pointer;">Annulla</button>
                        <button type="submit"
                            style="padding: 10px 15px; background: var(--primary-color); color: white; border: none; border-radius: 8px; cursor: pointer;">Salva</button>
                    </div>
                </form>
            </div>
        </div>
        <!-- Modal per visualizzare/modificare/eliminare un evento -->
        <div id="eventModal"
            style="display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.4);">
            <div
                style="background-color: white; margin: 10% auto; padding: 25px; border-radius: var(--border-radius); box-shadow: var(--shadow-lg); width: 60%; max-width: 550px;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
                    <h2 style="margin: 0; color: var(--primary-color);" id="eventModalTitle">Dettagli Evento</h2>
                    <span id="closeEventModal" style="cursor: pointer; font-size: 1.8rem;">&times;</span>
                </div>
        
                <!-- Visualizzazione evento (modalità lettura) -->
                <div id="eventViewMode">
                    <div style="margin-bottom: 20px; display: flex; align-items: center;">
                        <i class="fas fa-calendar-day"
                            style="color: var(--primary-color); margin-right: 10px; font-size: 1.2rem;"></i>
                        <div>
                            <div style="font-weight: 600; margin-bottom: 3px;">Data e ora:</div>
                            <div id="eventDateTime" style="color: var(--text-muted);"></div>
                        </div>
                    </div>
        
                    <div style="margin-bottom: 20px; display: flex; align-items: flex-start;">
                        <i class="fas fa-align-left"
                            style="color: var(--primary-color); margin-right: 10px; font-size: 1.2rem; margin-top: 3px;"></i>
                        <div>
                            <div style="font-weight: 600; margin-bottom: 5px;">Descrizione:</div>
                            <div id="eventDescription"
                                style="color: var(--text-dark); background: var(--light-gray); padding: 12px; border-radius: 8px;">
                            </div>
                        </div>
                    </div>
        
                    <div style="display: flex; justify-content: flex-end; gap: 15px; margin-top: 30px;">
                        <button id="deleteEventBtn"
                            style="padding: 10px 20px; background: #fee2e2; color: #ef4444; border: none; border-radius: 8px; cursor: pointer; display: flex; align-items: center; gap: 8px; font-weight: 500;">
                            <i class="fas fa-trash"></i> Elimina
                        </button>
                        <button id="editEventBtn"
                            style="padding: 10px 20px; background: var(--primary-color); color: white; border: none; border-radius: 8px; cursor: pointer; display: flex; align-items: center; gap: 8px; font-weight: 500;">
                            <i class="fas fa-edit"></i> Modifica
                        </button>
                    </div>
                </div>
        
                <!-- Modifica evento (modalità modifica) -->
                <div id="eventEditMode" style="display: none;">
                    <form id="editEventForm">
                        <div style="margin-bottom: 15px;">
                            <label for="editEventDate" style="display: block; margin-bottom: 8px; font-weight: 500;">Data e
                                ora:</label>
                            <input type="datetime-local" id="editEventDate" required
                                style="width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px;">
                        </div>
                        <div style="margin-bottom: 20px;">
                            <label for="editEventDescription"
                                style="display: block; margin-bottom: 8px; font-weight: 500;">Descrizione:</label>
                            <textarea id="editEventDescription" rows="4" required
                                style="width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px;"></textarea>
                        </div>
        
                        <div style="display: flex; justify-content: flex-end; gap: 15px; margin-top: 30px;">
                            <button type="button" id="cancelEdit"
                                style="padding: 10px 20px; background: #f1f5f9; border: none; border-radius: 8px; cursor: pointer; font-weight: 500;">Annulla</button>
                            <button type="submit"
                                style="padding: 10px 25px; background: var(--primary-color); color: white; border: none; border-radius: 8px; cursor: pointer; font-weight: 500;">Salva
                                modifiche</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="calendar-container">
            <div id="calendar"></div>
        </div>
    </div>

    <div class="chat-float-btn">
        <i class="fas fa-comment-alt"></i>
    </div>

    <div id="chatWindow">
        <div id="chatHeader">
            <div class="chat-recipient">
                <div class="user-avatar">F</div>
                <h3>Farmacista</h3>
            </div>
            <button id="closeChat">&times;</button>
        </div>
        <div id="chatBody">
            <div class="message system">
                Benvenuto nella chat di PFarmacy! Come possiamo aiutarti oggi?
            </div>
        </div>
        <div id="chatFooter">
            <input type="text" id="chatInput" placeholder="Scrivi un messaggio...">
            <button id="sendMessage"><i class="fas fa-paper-plane"></i></button>
        </div>
    </div>

    <script>
// Inizializzazione di FullCalendar
document.addEventListener('DOMContentLoaded', function () {
    var calendarEl = document.getElementById('calendar');
    let currentEvent = null;

    var calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: 'dayGridMonth',
        locale: 'it',
        headerToolbar: {
            left: 'prev,next today',
            center: 'title',
            right: 'dayGridMonth,timeGridWeek,timeGridDay'
        },
        buttonText: {
            today: 'Oggi',
            month: 'Mese',
            week: 'Settimana',
            day: 'Giorno'
        },
        events: [
            {
                title: 'Ritiro farmaci',
                start: '2025-03-25',
                color: '#52B788'
            },
            {
                title: 'Consulto farmacista',
                start: '2025-03-28T15:30:00',
                color: '#3366FF'
            },
            {
                title: 'Controllo pressione',
                start: '2025-04-05T10:00:00',
                color: '#F59E0B'
            }
        ],
        eventClick: function (info) {
            // Salva il riferimento all'evento corrente
            currentEvent = info.event;
            
            // Popola il modal con i dati dell'evento
            document.getElementById('eventModalTitle').innerText = 'Dettagli Evento';
            
            // Formatta la data e l'ora in formato leggibile
            const eventDate = info.event.start;
            const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };
            document.getElementById('eventDateTime').innerText = eventDate.toLocaleDateString('it-IT', options);
            
            // Imposta la descrizione
            document.getElementById('eventDescription').innerText = info.event.title;
            
            // Imposta anche i valori nei campi di modifica
            document.getElementById('editEventDate').value = formatDateForInput(eventDate);
            document.getElementById('editEventDescription').value = info.event.title;
            
            // Mostra il modal in modalità visualizzazione
            document.getElementById('eventViewMode').style.display = 'block';
            document.getElementById('eventEditMode').style.display = 'none';
            document.getElementById('eventModal').style.display = 'block';
        },
        // Aggiunta della funzionalità per cliccare su una data
        dateClick: function(info) {
            // Pre-popola il campo data con la data selezionata
            document.getElementById('reminderDate').value = info.dateStr + 'T12:00'; // Imposta mezzogiorno come ora predefinita
            openReminderModal();
        }
    });

    calendar.render();

    // Funzione per formattare la data nel formato richiesto dall'input datetime-local
    function formatDateForInput(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        
        return `${year}-${month}-${day}T${hours}:${minutes}`;
    }

    // Riferimenti UI elementi del modal per nuovo promemoria
    const reminderModal = document.getElementById('reminderModal');
    const newReminderBtn = document.getElementById('newReminderBtn');
    const closeReminderModalBtn = document.getElementById('closeReminderModal');
    const cancelReminderBtn = document.getElementById('cancelReminder');
    const reminderForm = document.getElementById('reminderForm');
    const reminderDate = document.getElementById('reminderDate');
    const reminderDescription = document.getElementById('reminderDescription');

    // Imposta la data di default a oggi
    const today = new Date();
    const formattedDate = formatDateForInput(today);
    reminderDate.value = formattedDate;

    // Funzione per aprire il modal del promemoria
    function openReminderModal() {
        reminderModal.style.display = 'block';
    }

    // Funzione per chiudere il modal del promemoria
    function closeReminderModal() {
        reminderModal.style.display = 'none';
        // Reset del form
        reminderForm.reset();
        reminderDate.value = formattedDate;
    }

    // Event listeners per aprire/chiudere il modal del promemoria
    newReminderBtn.addEventListener('click', openReminderModal);
    closeReminderModalBtn.addEventListener('click', closeReminderModal);
    cancelReminderBtn.addEventListener('click', closeReminderModal);

    // Chiudi il modal se l'utente clicca fuori da esso
    window.addEventListener('click', (event) => {
        if (event.target === reminderModal) {
            closeReminderModal();
        }
    });

    // Gestione del submit del form per nuovo promemoria
    reminderForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Recupera i valori dal form
        const date = reminderDate.value;
        const description = reminderDescription.value;
        
        // Colore casuale per il promemoria (selezionato da una palette)
        const colors = ['#4f46e5', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6'];
        const randomColor = colors[Math.floor(Math.random() * colors.length)];
        
        // Aggiungi l'evento al calendario
        const newEvent = {
            title: description,
            start: date,
            color: randomColor,
            extendedProps: {
                type: 'reminder'
            }
        };
        
        // Aggiungi l'evento al calendario
        calendar.addEvent(newEvent);
        
        // Notifica l'utente
        alert('Promemoria aggiunto con successo!');
        
        // Chiudi il modal
        closeReminderModal();
    });

    // Riferimenti UI elementi del modal per gestione eventi
    const eventModal = document.getElementById('eventModal');
    const closeEventModalBtn = document.getElementById('closeEventModal');
    const deleteEventBtn = document.getElementById('deleteEventBtn');
    const editEventBtn = document.getElementById('editEventBtn');
    const cancelEditBtn = document.getElementById('cancelEdit');
    const editEventForm = document.getElementById('editEventForm');
    const eventViewMode = document.getElementById('eventViewMode');
    const eventEditMode = document.getElementById('eventEditMode');

    // Funzione per chiudere il modal degli eventi
    function closeEventModal() {
        eventModal.style.display = 'none';
    }

    // Event listener per chiudere il modal degli eventi
    closeEventModalBtn.addEventListener('click', closeEventModal);

    // Chiudi il modal se l'utente clicca fuori da esso
    window.addEventListener('click', (event) => {
        if (event.target === eventModal) {
            closeEventModal();
        }
    });

    // Event listener per passare alla modalità di modifica
    editEventBtn.addEventListener('click', function() {
        eventViewMode.style.display = 'none';
        eventEditMode.style.display = 'block';
    });

    // Event listener per tornare alla modalità di visualizzazione
    cancelEditBtn.addEventListener('click', function() {
        eventViewMode.style.display = 'block';
        eventEditMode.style.display = 'none';
    });

    // Event listener per eliminare un evento
    deleteEventBtn.addEventListener('click', function() {
        if (confirm('Sei sicuro di voler eliminare questo evento?')) {
            if (currentEvent) {
                // Rimuovi l'evento dal calendario
                currentEvent.remove();
                // Chiudi il modal
                closeEventModal();
                // Notifica l'utente
                alert('Evento eliminato con successo!');
            }
        }
    });

    // Event listener per salvare le modifiche a un evento
    editEventForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        if (currentEvent) {
            // Ottieni i nuovi valori
            const newDate = document.getElementById('editEventDate').value;
            const newDescription = document.getElementById('editEventDescription').value;
            
            // Aggiorna l'evento
            currentEvent.setProp('title', newDescription);
            currentEvent.setStart(new Date(newDate));
            
            // Torna alla modalità visualizzazione
            eventViewMode.style.display = 'block';
            eventEditMode.style.display = 'none';
            
            // Aggiorna i dettagli nel modal
            const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };
            document.getElementById('eventDateTime').innerText = new Date(newDate).toLocaleDateString('it-IT', options);
            document.getElementById('eventDescription').innerText = newDescription;
            
            // Notifica l'utente
            alert('Evento aggiornato con successo!');
        }
    });

    // Configurazione della chat
    setupChat();

    // Inizializzazione del WebSocket e contatore visitatori
    setupVisitorCounter();
});

        function logout() {
            fetch('/logout', {
                method: 'POST',
                credentials: 'include'
            })
                .then(() => {
                    window.location.href = '/';  // Redirect alla homepage dopo il logout
                })
                .catch(error => {
                    console.error('Errore durante il logout:', error);
                    window.location.href = '/';  // Redirect alla homepage anche in caso di errore
                });
        }

        // Funzione di configurazione della chat
        function setupChat() {
            const chatIcon = document.getElementById('chatIcon');
            const chatFloatBtn = document.querySelector('.chat-float-btn');
            const chatWindow = document.getElementById('chatWindow');
            const closeChat = document.getElementById('closeChat');
            const chatInput = document.getElementById('chatInput');
            const sendButton = document.getElementById('sendMessage');
            const chatBody = document.getElementById('chatBody');
            const chatBadge = document.getElementById('chatBadge');

            // Messaggi predefiniti del farmacista
            const pharmacistResponses = [
                "In cosa posso esserti d'aiuto oggi?",
                "Hai bisogno di informazioni sui tuoi farmaci?",
                "Vuoi fissare un appuntamento per un consulto?",
                "Ti ricordo che il tuo prossimo controllo è previsto per la prossima settimana.",
                "I tuoi esami sono pronti, puoi passare a ritirarli quando preferisci.",
                "Il farmaco che hai richiesto è disponibile da oggi.",
                "Ti consiglio di assumere il farmaco dopo i pasti principali."
            ];

            let unreadMessages = 0;
            let chatOpen = false;

            // Gestione apertura e chiusura della finestra di chat
            function openChat() {
                chatWindow.style.display = 'flex';
                chatOpen = true;
                // Reset del badge
                unreadMessages = 0;
                chatBadge.style.display = 'none';
                chatBadge.textContent = '0';
                // Focus sull'input
                setTimeout(() => chatInput.focus(), 100);
            }

            chatIcon.addEventListener('click', openChat);
            chatFloatBtn.addEventListener('click', openChat);

            closeChat.addEventListener('click', () => {
                chatWindow.style.display = 'none';
                chatOpen = false;
            });

            // Collega anche il footer card dei messaggi all'apertura chat
            document.querySelector('.dashboard-card:nth-child(3) .dashboard-card-footer').addEventListener('click', openChat);

            // Funzione per inviare un messaggio
            function sendMessage() {
                const text = chatInput.value.trim();
                if (text) {
                    // Aggiunta del messaggio del paziente
                    addMessage(text, 'sent');
                    chatInput.value = '';

                    // Simulazione risposta del farmacista
                    setTimeout(() => {
                        // Mostra "sta scrivendo..."
                        const typingIndicator = document.createElement('div');
                        typingIndicator.className = 'message received';
                        typingIndicator.innerHTML = '<div class="typing-indicator">Farmacista sta scrivendo<span>.</span><span>.</span><span>.</span></div>';
                        typingIndicator.id = 'typing-indicator';
                        chatBody.appendChild(typingIndicator);
                        chatBody.scrollTop = chatBody.scrollHeight;

                        // Dopo un po' rimuovi l'indicatore e mostra la risposta
                        setTimeout(() => {
                            const typingElement = document.getElementById('typing-indicator');
                            if (typingElement) typingElement.remove();

                            // Scegli una risposta casuale
                            const randomResponse = pharmacistResponses[Math.floor(Math.random() * pharmacistResponses.length)];
                            addMessage(randomResponse, 'received');

                            // Se la chat è chiusa, incrementa il contatore
                            if (!chatOpen) {
                                unreadMessages++;
                                chatBadge.textContent = unreadMessages;
                                chatBadge.style.display = 'flex';
                            }
                        }, 2000);
                    }, 1000);
                }
            }

            // Binding del pulsante di invio e della pressione Enter
            sendButton.addEventListener('click', sendMessage);
            chatInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });

            // Funzione per aggiungere messaggi alla chat
            function addMessage(text, type) {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${type}`;

                // Contenuto del messaggio
                const messageContent = document.createElement('div');
                messageContent.className = 'message-content';
                messageContent.textContent = text;

                // Timestamp
                const timestamp = document.createElement('div');
                timestamp.className = 'message-timestamp';
                const now = new Date();
                timestamp.textContent = now.getHours().toString().padStart(2, '0') + ':' +
                    now.getMinutes().toString().padStart(2, '0');

                messageDiv.appendChild(messageContent);
                messageDiv.appendChild(timestamp);

                // Se è un messaggio ricevuto, aggiungi pulsanti di risposta rapida
                if (type === 'received' && Math.random() > 0.5) {
                    const actionsDiv = document.createElement('div');
                    actionsDiv.className = 'chat-actions';

                    const quickResponses = ['Grazie', 'Ho capito', 'Posso avere maggiori informazioni?'];
                    quickResponses.forEach(response => {
                        const button = document.createElement('button');
                        button.className = 'chat-action-btn';
                        button.textContent = response;
                        button.addEventListener('click', () => {
                            addMessage(response, 'sent');

                            // Simulazione risposta del farmacista
                            setTimeout(() => {
                                const followUp = "C'è altro in cui posso aiutarti?";
                                addMessage(followUp, 'received');
                            }, 1500);
                        });
                        actionsDiv.appendChild(button);
                    });

                    messageDiv.appendChild(actionsDiv);
                }

                chatBody.appendChild(messageDiv);
                chatBody.scrollTop = chatBody.scrollHeight;
            }

            // Simulazione di un messaggio dopo un po' di tempo per attirare l'attenzione
            setTimeout(() => {
                if (!chatOpen) {
                    unreadMessages++;
                    chatBadge.textContent = unreadMessages;
                    chatBadge.style.display = 'flex';

                    // Aggiungi il messaggio alla chat anche se è chiusa
                    addMessage("Il tuo farmaco è pronto per il ritiro. Passi oggi?", 'received');
                }
            }, 20000);
        }

        // Funzione per setup del contatore visitatori con WebSocket
        function setupVisitorCounter() {
            const visitorCountElement = document.getElementById('visitorCount');

            // Imposta un valore iniziale stabile
            visitorCountElement.textContent = "1";

            // Crea una connessione WebSocket (sostituisci con l'URL del tuo server WebSocket)
            const wsProtocol = window.location.protocol === 'https:' ? 'wss://' : 'ws://';
            const wsUrl = `${wsProtocol}${window.location.host}/ws/visitors`;

            // Inizializza WebSocket
            let socket;
            try {
                socket = new WebSocket(wsUrl);
            } catch (e) {
                console.error('Impossibile connettersi al WebSocket:', e);
                return; // Esci dalla funzione se non è possibile connettersi
            }

            // Evento di apertura connessione
            socket.addEventListener('open', (event) => {
                console.log('Connessione WebSocket stabilita');
                // Invia un messaggio al server per registrare il visitatore
                socket.send(JSON.stringify({
                    type: 'register',
                    page: 'paziente',
                    user: 'Miftarve',
                    timestamp: new Date().toISOString()
                }));
            });

            // Evento di ricezione messaggi
            socket.addEventListener('message', (event) => {
                try {
                    const data = JSON.parse(event.data);

                    // Aggiorna il contatore dei visitatori SOLO se il messaggio è di tipo visitorCount
                    if (data.type === 'visitorCount' && typeof data.count === 'number') {
                        // Verifica che il conteggio sia un numero valido e positivo
                        const count = Math.max(1, parseInt(data.count) || 1);

                        // Aggiunge classe per l'animazione
                        visitorCountElement.classList.add('visitor-pulse');

                        // Aggiorna il numero di visitatori
                        visitorCountElement.textContent = count;

                        // Rimuove la classe di animazione dopo che è terminata
                        setTimeout(() => {
                            visitorCountElement.classList.remove('visitor-pulse');
                        }, 1500);
                    }
                } catch (error) {
                    console.error('Errore nel parsing del messaggio WebSocket:', error);
                }
            });

            // Gestione degli errori
            socket.addEventListener('error', (event) => {
                console.error('Errore WebSocket:', event);
            });

            // Gestione della chiusura della connessione
            socket.addEventListener('close', (event) => {
                console.log('Connessione WebSocket chiusa. Codice:', event.code, 'Ragione:', event.reason);

                // Tenta di riconnettersi dopo un ritardo
                setTimeout(() => {
                    console.log('Tentativo di riconnessione WebSocket...');
                    setupVisitorCounter();
                }, 5000); // Riprova dopo 5 secondi
            });

            // Gestione della chiusura della pagina per informare il server
            window.addEventListener('beforeunload', () => {
                // Invia un messaggio al server prima di chiudere la pagina
                if (socket && socket.readyState === WebSocket.OPEN) {
                    socket.send(JSON.stringify({
                        type: 'unregister',
                        page: 'paziente',
                        user: 'Miftarve'
                    }));
                }
            });
        }
    </script>
</body>

</html>