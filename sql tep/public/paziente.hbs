<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PFarmacy - Area Paziente</title>
    <!-- Modern Font Awesome 6 for better icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <!-- Google Font - Nunito for clean, professional look -->
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <!-- Calendar CSS -->
    <link href='https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.css' rel='stylesheet'>
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.js'></script>
    <!-- Base styles -->
    <link rel="stylesheet" href="/css/style.css">
    <style>
        :root {
            --primary-color: #4F46E5;
            --primary-dark: #4338CA;
            --primary-light: #EEF2FF;
            --secondary-color: #10B981;
            --secondary-dark: #059669;
            --danger-color: #EF4444;
            --warning-color: #F59E0B;
            --text-dark: #1F2937;
            --text-medium: #4B5563;
            --text-light: #6B7280;
            --text-muted: #9CA3AF;
            --light-gray: #F9FAFB;
            --medium-gray: #F3F4F6;
            --border-color: #E5E7EB;
            --border-radius: 12px;
            --card-radius: 18px;
            --header-height: 70px;
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --shadow-md: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --shadow-lg: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }

        body {
            font-family: 'Nunito', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f8fafc;
            color: var(--text-dark);
            margin: 0;
            padding: 0;
            line-height: 1.6;
        }

        /* Header styling */
        .main-header {
            background-color: white;
            box-shadow: var(--shadow);
            position: sticky;
            top: 0;
            z-index: 100;
            height: var(--header-height);
            display: flex;
            align-items: center;
        }

        .container {
            width: 100%;
            max-width: 1280px;
            margin: 0 auto;
            padding: 0 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            display: flex;
            align-items: center;
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--primary-color);
            gap: 8px;
        }

        .logo i {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
            font-size: 1.8rem;
        }

        .user-profile {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .profile-info {
            text-align: right;
        }

        .profile-name {
            font-weight: 600;
            color: var(--text-dark);
        }

        .profile-status {
            font-size: 0.8rem;
            color: var(--text-light);
        }

        .action-button {
            display: flex;
            align-items: center;
        }

        .navbar-link {
            display: flex;
            align-items: center;
            gap: 6px;
            background-color: var(--primary-light);
            color: var(--primary-color);
            padding: 8px 12px;
            border-radius: 10px;
            text-decoration: none;
            font-weight: 600;
            font-size: 0.9rem;
            position: relative;
            transition: all 0.2s;
        }

        .navbar-link:hover {
            background-color: var(--primary-color);
            color: white;
        }

        .notification-badge {
            position: absolute;
            top: -8px;
            right: -8px;
            background-color: var(--danger-color);
            color: white;
            font-size: 0.7rem;
            font-weight: 600;
            width: 18px;
            height: 18px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            border: 2px solid white;
        }

        .logout-btn {
            display: flex;
            align-items: center;
            gap: 6px;
            background-color: white;
            border: 1px solid var(--border-color);
            color: var(--text-medium);
            padding: 8px 12px;
            border-radius: 10px;
            cursor: pointer;
            font-weight: 600;
            font-size: 0.9rem;
            transition: all 0.2s;
        }

        .logout-btn:hover {
            background-color: #fee2e2;
            border-color: #fee2e2;
            color: var(--danger-color);
        }

        /* Visitor counter */
        .visitor-counter {
            position: fixed;
            bottom: 20px;
            left: 20px;
            background-color: white;
            padding: 8px 16px;
            border-radius: 24px;
            box-shadow: var(--shadow-md);
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 0.85rem;
            z-index: 90;
            border: 1px solid var(--border-color);
        }

        .visitor-counter i {
            color: var(--primary-color);
        }

        .visitor-counter-number {
            font-weight: 700;
            color: var(--primary-color);
        }

        /* Main content layout */
        .main-content {
            max-width: 1280px;
            margin: 30px auto;
            padding: 0 20px;
        }

        /* Dashboard grid */
        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 24px;
            margin-bottom: 40px;
        }

        .dashboard-card {
            background-color: white;
            border-radius: var(--card-radius);
            box-shadow: var(--shadow);
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .dashboard-card:hover {
            transform: translateY(-4px);
            box-shadow: var(--shadow-md);
        }

        .dashboard-card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 24px;
            background: linear-gradient(135deg, rgba(79, 70, 229, 0.1), rgba(16, 185, 129, 0.1));
            border-bottom: 1px solid var(--border-color);
        }

        .dashboard-card-title {
            font-size: 1.1rem;
            font-weight: 700;
            color: var(--text-dark);
        }

        .dashboard-card-icon {
            width: 40px;
            height: 40px;
            display: flex;
            justify-content: center;
            align-items: center;
            background: white;
            border-radius: 12px;
            box-shadow: var(--shadow-sm);
            color: var(--primary-color);
        }

        .dashboard-card-icon i {
            font-size: 1.2rem;
        }

        .dashboard-card-content {
            padding: 20px 24px;
            min-height: 80px;
            display: flex;
            align-items: center;
        }

        .dashboard-card-footer {
            padding: 15px 24px;
            border-top: 1px solid var(--border-color);
            color: var(--primary-color);
            font-weight: 600;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            gap: 8px;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .dashboard-card-footer:hover {
            background-color: var(--primary-light);
        }

        /* Section title */
        .section-title {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .section-title h2 {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--text-dark);
            margin: 0;
            position: relative;
            padding-left: 16px;
        }

        .section-title h2::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 4px;
            background: linear-gradient(to bottom, var(--primary-color), var(--secondary-color));
            border-radius: 4px;
        }

        .chat-action-btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 10px 16px;
            border-radius: 10px;
            font-weight: 600;
            font-size: 0.9rem;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.2s;
            box-shadow: var(--shadow-sm);
        }

        .chat-action-btn:hover {
            background-color: var(--primary-dark);
            box-shadow: var(--shadow-md);
        }

        /* Status badges */
        .badge {
            padding: 6px 12px;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            gap: 6px;
        }

        .bg-warning {
            background-color: #fff7ed;
            color: var(--warning-color);
            border: 1px solid #fed7aa;
        }

        .bg-success {
            background-color: #f0fdf4;
            color: var(--secondary-color);
            border: 1px solid #dcfce7;
        }

        .bg-danger {
            background-color: #fef2f2;
            color: var(--danger-color);
            border: 1px solid #fee2e2;
        }
        
        /* Alert styles */
        .alert {
            padding: 16px;
            border-radius: var(--border-radius);
            margin: 16px 0;
            display: none;
            font-weight: 500;
            align-items: center;
            gap: 12px;
        }

        .alert-success {
            background-color: #f0fdf4;
            border-left: 4px solid var(--secondary-color);
            color: var(--secondary-dark);
        }

        .alert-warning {
            background-color: #fff7ed;
            border-left: 4px solid var(--warning-color);
            color: #92400e;
        }

        .alert i {
            font-size: 1.2rem;
        }
        
        /* Layout contenitore calendario ed elenco promemorie */
        .calendar-container {
            background-color: white;
            border-radius: var(--card-radius);
            box-shadow: var(--shadow);
            padding: 30px;
            margin-top: 30px;
            display: flex;
            gap: 30px;
        }
        
        .calendar-wrapper {
            flex: 1;
        }
        
        .reminders-list {
            width: 320px;
            border-left: 1px solid var(--border-color);
            padding-left: 30px;
        }
        
        /* Stile per l'elenco promemorie */
        .reminder-item {
            margin-bottom: 15px;
            padding: 16px;
            border-radius: 12px;
            background-color: var(--light-gray);
            border-left: 4px solid;
            box-shadow: var(--shadow-sm);
            transition: all 0.2s ease;
            cursor: pointer;
        }
        
        .reminder-item:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow);
            background-color: white;
        }
        
        .reminder-item.pending {
            border-left-color: var(--warning-color);
        }
        
        .reminder-item.approved {
            border-left-color: var(--secondary-color);
        }
        
        .reminder-item.rejected {
            border-left-color: var(--danger-color);
        }
        
        .reminder-date {
            font-size: 0.8rem;
            color: var(--text-light);
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 6px;
        }
        
        .reminder-date i {
            color: var(--text-muted);
        }
        
        .reminder-title {
            font-weight: 600;
            margin-bottom: 10px;
            line-height: 1.4;
        }
        
        .reminder-status {
            font-size: 0.75rem;
            font-weight: 600;
            padding: 4px 10px;
            border-radius: 20px;
            display: inline-flex;
            align-items: center;
            gap: 4px;
        }
        
        .reminder-status.pending {
            background-color: #fff7ed;
            color: var(--warning-color);
        }
        
        .reminder-status.approved {
            background-color: #f0fdf4;
            color: var(--secondary-color);
        }
        
        .reminder-status.rejected {
            background-color: #fef2f2;
            color: var(--danger-color);
        }
        
        .reminders-title {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid var(--border-color);
        }
        
        .reminders-title h3 {
            margin: 0;
            font-size: 1.1rem;
            font-weight: 700;
            color: var(--text-dark);
        }
        
        .refresh-reminders {
            width: 36px;
            height: 36px;
            background: var(--medium-gray);
            border: none;
            color: var(--text-medium);
            cursor: pointer;
            transition: all 0.2s ease;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .refresh-reminders:hover {
            background-color: var(--primary-light);
            color: var(--primary-color);
            transform: rotate(30deg);
        }
        
        .empty-reminders {
            text-align: center;
            padding: 40px 0;
            color: var(--text-muted);
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 12px;
        }
        
        .empty-reminders i {
            font-size: 2rem;
            opacity: 0.5;
        }
        
        /* Visitor counter animation */
        .visitor-pulse {
            animation: pulse 1s;
        }
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }

        /* Appointment cards in dashboard */
        .appointment-card {
            border-left: 3px solid;
            padding: 12px;
            margin-bottom: 10px;
            border-radius: 8px;
            background-color: var(--light-gray);
            transition: transform 0.2s ease;
        }

        .appointment-card:hover {
            transform: translateX(4px);
        }
        
        .appointment-pending {
            border-color: var(--warning-color);
        }
        .appointment-approved {
            border-color: var(--secondary-color);
        }
        .appointment-rejected {
            border-color: var(--danger-color);
        }
        
        /* Spinner di caricamento */
        .spinner {
            animation: spin 1s linear infinite;
            display: inline-block;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Custom FullCalendar styling */
        .fc .fc-toolbar-title {
            font-size: 1.3rem;
            font-weight: 700;
        }

        .fc .fc-button {
            border-radius: 8px !important;
            box-shadow: var(--shadow-sm) !important;
            transition: all 0.2s !important;
        }

        .fc .fc-button-primary {
            background-color: white !important;
            border-color: var(--border-color) !important;
            color: var(--text-medium) !important;
        }

        .fc .fc-button-primary:hover {
            background-color: var(--medium-gray) !important;
            color: var(--text-dark) !important;
        }

        .fc .fc-button-primary:not(:disabled).fc-button-active,
        .fc .fc-button-primary:not(:disabled):active {
            background-color: var(--primary-color) !important;
            border-color: var(--primary-color) !important;
            color: white !important;
        }

        .fc .fc-daygrid-day.fc-day-today {
            background-color: var(--primary-light) !important;
        }

        .fc .fc-highlight {
            background-color: rgba(79, 70, 229, 0.1) !important;
        }

        .fc a {
            color: var(--text-dark) !important;
        }

        .fc-event {
            border-radius: 6px !important;
            border: none !important;
            padding: 2px 6px !important;
        }

        .fc .fc-daygrid-day-number {
            font-weight: 600;
            font-size: 0.9rem;
            padding: 8px;
        }

        .fc .fc-col-header-cell-cushion {
            font-weight: 600;
            color: var(--text-medium);
        }
        
        /* Modal styling */
        .modal-backdrop {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
            backdrop-filter: blur(4px);
            animation: fadeIn 0.2s ease-out;
        }

        .modal-container {
            background-color: white;
            margin: 10% auto;
            padding: 30px;
            border-radius: var(--card-radius);
            box-shadow: var(--shadow-lg);
            width: 90%;
            max-width: 550px;
            animation: slideDown 0.3s ease-out;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 1px solid var(--border-color);
        }

        .modal-title {
            margin: 0;
            font-size: 1.3rem;
            font-weight: 700;
            color: var(--text-dark);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .modal-title i {
            color: var(--primary-color);
        }

        .modal-close {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            background-color: var(--medium-gray);
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 1.2rem;
            border: none;
            color: var(--text-medium);
        }

        .modal-close:hover {
            background-color: #fee2e2;
            color: var(--danger-color);
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--text-dark);
        }

        .form-input {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid var(--border-color);
            border-radius: 10px;
            font-family: inherit;
            font-size: 1rem;
            transition: all 0.2s;
        }

        .form-input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px var(--primary-light);
            outline: none;
        }

        .form-textarea {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid var(--border-color);
            border-radius: 10px;
            font-family: inherit;
            font-size: 1rem;
            min-height: 100px;
            resize: vertical;
            transition: all 0.2s;
        }

        .form-textarea:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px var(--primary-light);
            outline: none;
        }

        .modal-footer {
            display: flex;
            justify-content: flex-end;
            gap: 15px;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid var(--border-color);
        }

        .btn {
            padding: 12px 20px;
            border-radius: 10px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            font-size: 0.95rem;
        }

        .btn-secondary {
            background-color: var(--medium-gray);
            color: var(--text-medium);
            border: none;
        }

        .btn-secondary:hover {
            background-color: var(--border-color);
            color: var(--text-dark);
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: white;
            border: none;
        }

        .btn-primary:hover {
            background-color: var(--primary-dark);
        }

        .btn-danger {
            background-color: #fee2e2;
            color: var(--danger-color);
            border: none;
        }

        .btn-danger:hover {
            background-color: #fecaca;
        }

        /* Animations */
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideDown {
            from { transform: translateY(-20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        /* Event detail section in modal */
        .event-detail-group {
            margin-bottom: 20px;
            display: flex;
            align-items: flex-start;
            gap: 12px;
        }

        .event-detail-icon {
            width: 40px;
            height: 40px;
            background-color: var(--medium-gray);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--primary-color);
            flex-shrink: 0;
        }

        .event-detail-content {
            flex-grow: 1;
        }

        .event-detail-label {
            font-weight: 600;
            margin-bottom: 5px;
            color: var(--text-medium);
            font-size: 0.9rem;
        }

        .event-detail-value {
            color: var(--text-dark);
            background-color: var(--light-gray);
            padding: 12px;
            border-radius: 10px;
            line-height: 1.5;
        }
        
        /* Responsive per mobile */
        @media (max-width: 768px) {
            .dashboard-grid {
                grid-template-columns: 1fr;
            }
            
            .calendar-container {
                flex-direction: column;
                padding: 20px;
            }
            
            .reminders-list {
                width: 100%;
                border-left: none;
                border-top: 1px solid var(--border-color);
                padding-left: 0;
                padding-top: 20px;
                margin-top: 20px;
            }
            
            .section-title {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }
            
            .modal-container {
                width: 95%;
                margin: 5% auto;
            }
            
            .user-profile {
                gap: 8px;
            }

            .profile-info {
                display: none;
            }

            .navbar-link span {
                display: none;
            }

            .logout-btn span {
                display: none;
            }
        }
    </style>
</head>

<body>
    <header class="main-header">
        <div class="container">
            <div class="logo">
                <i class="fa-solid fa-mortar-pestle"></i>
                <span>PFarmacy</span>
            </div>
            <div class="user-profile">
                <div class="profile-info">
                    <div class="profile-name" id="patientName">{{ patient.nome }} {{ patient.cognome }}</div>
                    <div class="profile-status">Area Paziente</div>
                </div>
                <div class="action-button">
                    <a href="/chat" class="navbar-link">
                        <i class="fa-solid fa-message"></i> <span>Chat</span>
                        <span class="notification-badge">2</span>
                    </a>
                </div>
                <button class="logout-btn" id="logoutBtn" onclick="logout()">
                    <i class="fa-solid fa-right-from-bracket"></i>
                    <span>Logout</span>
                </button>
            </div>
        </div>
    </header>

    <!-- Contatore visitatori in tempo reale -->
    <div class="visitor-counter">
        <i class="fa-solid fa-user-group"></i>
        <span>Utenti online: <span id="visitorCount" class="visitor-counter-number">1</span></span>
    </div>

    <div class="main-content">
        <div class="dashboard-grid">
            <div class="dashboard-card">
                <div class="dashboard-card-header">
                    <div class="dashboard-card-title">Prossimo Appuntamento</div>
                    <div class="dashboard-card-icon">
                        <i class="fa-solid fa-calendar-check"></i>
                    </div>
                </div>
                <div class="dashboard-card-content" id="nextAppointment">
                    La tua prossima visita è programmata per il 28 Marzo alle 15:30
                </div>
                <div class="dashboard-card-footer">
                    <i class="fa-solid fa-clock"></i> <span id="appointmentDaysLeft">Tra 5 giorni</span>
                </div>
            </div>

            <div class="dashboard-card">
                <div class="dashboard-card-header">
                    <div class="dashboard-card-title">Prescrizioni attive</div>
                    <div class="dashboard-card-icon">
                        <i class="fa-solid fa-prescription"></i>
                    </div>
                </div>
                <div class="dashboard-card-content">
                    Hai 3 prescrizioni attive. La prossima scade il 15 Aprile.
                </div>
                <div class="dashboard-card-footer">
                    <i class="fa-solid fa-list-check"></i> Visualizza dettagli
                </div>
            </div>

            <div class="dashboard-card">
                <div class="dashboard-card-header">
                    <div class="dashboard-card-title">Messaggi non letti</div>
                    <div class="dashboard-card-icon">
                        <i class="fa-solid fa-envelope-open-text"></i>
                    </div>
                </div>
                <div class="dashboard-card-content">
                    Hai 1 messaggio non letto dal tuo farmacista.
                </div>
                <div class="dashboard-card-footer">
                    <i class="fa-solid fa-comment-dots"></i> Apri chat
                </div>
            </div>
        </div>

        <div class="section-title">
            <h2>I tuoi appuntamenti</h2>
            <button class="chat-action-btn" id="newReminderBtn">
                <i class="fa-solid fa-plus"></i> Nuovo Promemoria
            </button>
        </div>
        
        <!-- Alerts for appointment actions -->
        <div id="successAlert" class="alert alert-success">
            <i class="fa-solid fa-circle-check"></i> Promemoria aggiunto con successo! In attesa di approvazione.
        </div>
        
        <div id="limitAlert" class="alert alert-warning">
            <i class="fa-solid fa-triangle-exclamation"></i> Hai raggiunto il limite massimo di un promemoria al giorno.
        </div>

        <!-- Modal per nuovo promemoria -->
        <div id="reminderModal" class="modal-backdrop" onclick="if(event.target===this) closeReminderModal();">
            <div class="modal-container">
                <div class="modal-header">
                    <h2 class="modal-title">
                        <i class="fa-solid fa-calendar-plus"></i> Nuovo Promemoria
                    </h2>
                    <button id="closeReminderModal" class="modal-close" onclick="closeReminderModal()">
                        <i class="fa-solid fa-xmark"></i>
                    </button>
                </div>
                <form id="reminderForm" onsubmit="event.stopPropagation();">
                    <div class="form-group">
                        <label for="reminderDate" class="form-label">
                            <i class="fa-regular fa-calendar"></i> Data e ora
                        </label>
                        <input type="datetime-local" id="reminderDate" required class="form-input">
                    </div>
                    <div class="form-group">
                        <label for="reminderDescription" class="form-label">
                            <i class="fa-solid fa-align-left"></i> Descrizione
                        </label>
                        <textarea id="reminderDescription" rows="3" required class="form-textarea" 
                          placeholder="Inserisci la descrizione del promemoria..."></textarea>
                    </div>
                    <div class="modal-footer">
                        <button type="button" id="cancelReminder" class="btn btn-secondary">
                            <i class="fa-solid fa-times"></i> Annulla
                        </button>
                        <button type="submit" class="btn btn-primary">
                            <i class="fa-solid fa-check"></i> Salva
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Modal per visualizzare/modificare/eliminare un evento -->
        <div id="eventModal" class="modal-backdrop">
            <div class="modal-container">
                <div class="modal-header">
                    <h2 class="modal-title" id="eventModalTitle">
                        <i class="fa-solid fa-calendar-day"></i> Dettagli Evento
                    </h2>
                    <button id="closeEventModal" class="modal-close">
                        <i class="fa-solid fa-xmark"></i>
                    </button>
                </div>

                <!-- Vista dei dettagli evento -->
                <div id="eventViewMode">
                    <div class="event-detail-group">
                        <div class="event-detail-icon">
                            <i class="fa-regular fa-calendar"></i>
                        </div>
                        <div class="event-detail-content">
                            <div class="event-detail-label">Data e ora</div>
                            <div id="eventDateTime" class="event-detail-value"></div>
                        </div>
                    </div>

                    <div class="event-detail-group">
                        <div class="event-detail-icon">
                            <i class="fa-solid fa-align-left"></i>
                        </div>
                        <div class="event-detail-content">
                            <div class="event-detail-label">Descrizione</div>
                            <div id="eventDescription" class="event-detail-value"></div>
                        </div>
                    </div>

                    <!-- Sezione stato dell'appuntamento -->
                    <div class="event-detail-group" id="eventStatusSection">
                        <div class="event-detail-icon">
                            <i class="fa-solid fa-circle-info"></i>
                        </div>
                        <div class="event-detail-content">
                            <div class="event-detail-label">Stato</div>
                            <div id="eventStatus"></div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button id="deleteEventBtn" class="btn btn-danger">
                            <i class="fa-solid fa-trash-can"></i> Elimina
                        </button>
                        <button id="editEventBtn" class="btn btn-primary">
                            <i class="fa-solid fa-pen-to-square"></i> Modifica
                        </button>
                    </div>
                </div>

                <!-- Form per modificare evento -->
                <div id="eventEditMode" style="display: none;">
                    <form id="editEventForm">
                        <div class="form-group">
                            <label for="editEventDate" class="form-label">
                                <i class="fa-regular fa-calendar"></i> Data e ora
                            </label>
                            <input type="datetime-local" id="editEventDate" required class="form-input">
                        </div>
                        <div class="form-group">
                            <label for="editEventDescription" class="form-label">
                                <i class="fa-solid fa-align-left"></i> Descrizione
                            </label>
                            <textarea id="editEventDescription" rows="4" required class="form-textarea"></textarea>
                        </div>

                        <div class="modal-footer">
                            <button type="button" id="cancelEdit" class="btn btn-secondary">
                                <i class="fa-solid fa-arrow-left"></i> Annulla
                            </button>
                            <button type="submit" class="btn btn-primary">
                                <i class="fa-solid fa-floppy-disk"></i> Salva modifiche
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Layout per calendario e lista promemorie -->
        <div class="calendar-container">
            <div class="calendar-wrapper">
                <div id="calendar"></div>
            </div>
            <div class="reminders-list">
                <div class="reminders-title">
                    <h3><i class="fa-solid fa-bell me-2"></i> I tuoi promemoria</h3>
                    <button class="refresh-reminders" onclick="loadReminders()">
                        <i class="fa-solid fa-arrows-rotate"></i>
                    </button>
                </div>
                <div id="reminders-container">
                    <!-- Le promemorie verranno caricate qui dinamicamente -->
                    <div class="empty-reminders">
                        <i class="fa-regular fa-calendar"></i>
                        <p>Nessun promemoria trovato</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Variabili globali
        let userReminders = [];
        
        // Inizializzazione di FullCalendar
        document.addEventListener('DOMContentLoaded', function () {
            var calendarEl = document.getElementById('calendar');
            var currentEvent = null;

            // Inizializza il calendario
            if (!calendarEl) {
                console.error('Elemento calendario non trovato!');
                const calendarContainer = document.querySelector('.calendar-wrapper');
                if (calendarContainer) {
                    calendarContainer.innerHTML = '<div id="calendar"></div>';
                    calendarEl = document.getElementById('calendar');
                }
            }

            // Funzione per ottenere il colore dell'evento in base allo stato
            function getEventColor(status) {
                switch (status) {
                    case 'approved': return '#10b981'; // Verde
                    case 'rejected': return '#ef4444'; // Rosso
                    case 'pending': return '#f59e0b'; // Arancione
                    default: return '#4F46E5'; // Blu (primary color)
                }
            }

            // Funzione per ottenere il testo dello stato dell'evento
            function getStatusText(status) {
                switch (status) {
                    case 'approved':
                        return '<span class="badge bg-success"><i class="fa-solid fa-check-circle"></i> Approvato</span>';
                    case 'rejected':
                        return '<span class="badge bg-danger"><i class="fa-solid fa-times-circle"></i> Rifiutato</span>';
                    case 'pending':
                        return '<span class="badge bg-warning"><i class="fa-solid fa-clock"></i> In attesa di approvazione</span>';
                    default:
                        return '';
                }
            }
            
            // Funzione per il caricamento dei promemoria per la lista laterale
            function loadReminders() {
                const reminderContainer = document.getElementById('reminders-container');
                if (!reminderContainer) return;
                
                // Mostra indicatore di caricamento
                reminderContainer.innerHTML = `
                    <div style="text-align: center; padding: 30px;">
                        <i class="fa-solid fa-spinner spinner" style="font-size: 24px; color: #6b7280;"></i>
                        <p style="margin-top: 15px; color: #6b7280;">Caricamento promemoria...</p>
                    </div>
                `;
                
                // Carica i promemoria dal server
                fetch('/api/calendar-events', {
                    method: 'GET',
                    credentials: 'include'
                })
                .then(response => {
                    if (!response.ok) throw new Error('Errore nel caricamento dei promemoria');
                    return response.json();
                })
                .then(events => {
                    console.log('Promemoria caricati:', events);
                    
                    // Salva i promemoria nella variabile globale
                    userReminders = events;
                    
                    // Se non ci sono promemoria, mostra un messaggio
                    if (!events || events.length === 0) {
                        reminderContainer.innerHTML = `
                            <div class="empty-reminders">
                                <i class="fa-regular fa-calendar"></i>
                                <p>Nessun promemoria trovato</p>
                                <button class="chat-action-btn" onclick="openReminderModalSafe()">
                                    <i class="fa-solid fa-plus"></i> Crea promemoria
                                </button>
                            </div>
                        `;
                        return;
                    }
                    
                    // Ordina gli eventi per data (più recenti prima)
                    events.sort((a, b) => new Date(b.start) - new Date(a.start));
                    
                    // Popola il contenitore
                    reminderContainer.innerHTML = '';
                    events.forEach(reminder => {
                        const date = new Date(reminder.start);
                        const formattedDate = date.toLocaleDateString('it-IT', {
                            weekday: 'short',
                            day: 'numeric',
                            month: 'short',
                            hour: '2-digit',
                            minute: '2-digit'
                        });
                        
                        const statusClass = reminder.status || 'pending';
                        let statusLabel, statusIcon;
                        
                        switch(statusClass) {
                            case 'approved':
                                statusLabel = 'Approvato';
                                statusIcon = 'fa-check-circle';
                                break;
                            case 'rejected':
                                statusLabel = 'Rifiutato';
                                statusIcon = 'fa-times-circle';
                                break;
                            default:
                                statusLabel = 'In attesa';
                                statusIcon = 'fa-clock';
                        }
                        
                        const reminderItem = document.createElement('div');
                        reminderItem.className = `reminder-item ${statusClass}`;
                        reminderItem.innerHTML = `
                            <div class="reminder-date"><i class="fa-regular fa-calendar-days"></i> ${formattedDate}</div>
                            <div class="reminder-title">${reminder.title}</div>
                            <div class="reminder-status ${statusClass}"><i class="fa-solid ${statusIcon}"></i> ${statusLabel}</div>
                        `;
                        
                        // Aggiungi event listener per visualizzare dettagli
                        reminderItem.addEventListener('click', () => {
                            // Cerca l'evento nel calendario
                            const calendarEvent = calendar.getEventById(reminder.id);
                            if (calendarEvent) {
                                // Simula click sull'evento del calendario
                                calendar.emit('eventClick', {
                                    event: calendarEvent,
                                    jsEvent: { preventDefault: () => {} }
                                });
                            } else {
                                // Fallback se l'evento non è nel calendario
                                showEventDetails(reminder);
                            }
                        });
                        
                        reminderContainer.appendChild(reminderItem);
                    });
                })
                .catch(error => {
                    console.error('Errore nel caricamento dei promemoria:', error);
                    reminderContainer.innerHTML = `
                        <div class="empty-reminders">
                            <i class="fa-solid fa-triangle-exclamation" style="color: #ef4444;"></i>
                            <p>Errore nel caricamento dei promemoria</p>
                            <button class="btn btn-secondary" onclick="loadReminders()">
                                <i class="fa-solid fa-arrows-rotate"></i> Riprova
                            </button>
                        </div>
                    `;
                });
            }
            
            // Funzione per mostrare i dettagli di un evento
            function showEventDetails(event) {
                // Popola il modal con i dati dell'evento
                document.getElementById('eventModalTitle').innerHTML = '<i class="fa-solid fa-calendar-day"></i> Dettagli Promemoria';
                
                // Formatta la data
                const eventDate = new Date(event.start);
                const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };
                document.getElementById('eventDateTime').innerText = eventDate.toLocaleDateString('it-IT', options);
                
                // Imposta la descrizione
                document.getElementById('eventDescription').innerText = event.title;
                
                // Imposta lo stato
                document.getElementById('eventStatus').innerHTML = getStatusText(event.status || 'pending');
                
                // Imposta valori per l'eventuale modifica
                document.getElementById('editEventDate').value = formatDateForInput(eventDate);
                document.getElementById('editEventDescription').value = event.title;
                
                // Gestisci visibilità bottoni in base allo stato
                const isRejected = event.status === 'rejected';
                document.getElementById('deleteEventBtn').style.display = isRejected ? 'none' : 'flex';
                document.getElementById('editEventBtn').style.display = isRejected ? 'none' : 'flex';
                
                // Mostra il modal
                document.getElementById('eventViewMode').style.display = 'block';
                document.getElementById('eventEditMode').style.display = 'none';
                document.getElementById('eventModal').style.display = 'block';
            }

            // Inizializzazione calendario
            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                locale: 'it',
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                buttonText: {
                    today: 'Oggi',
                    month: 'Mese',
                    week: 'Settimana',
                    day: 'Giorno'
                },
                // Carica gli eventi dal server
                events: function (info, successCallback, failureCallback) {
                    fetch('/api/calendar-events', {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        credentials: 'include' // Per includere i cookie nella richiesta
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Errore nel recupero degli eventi');
                            }
                            return response.json();
                        })
                        .then(events => {
                            // Formatta gli eventi con colori in base allo stato
                            const formattedEvents = events.map(event => ({
                                id: event.id,
                                title: event.title,
                                start: new Date(event.start),
                                color: getEventColor(event.status),
                                extendedProps: {
                                    status: event.status,
                                    type: 'user_reminder'
                                }
                            }));

                            // Aggiungi eventi predefiniti
                            const defaultEvents = [
                                {
                                    title: 'Ritiro farmaci',
                                    start: '2025-05-25',
                                    color: '#52B788',
                                    extendedProps: { type: 'default' }
                                },
                                {
                                    title: 'Consulto farmacista',
                                    start: '2025-05-28T15:30:00',
                                    color: '#4F46E5',
                                    extendedProps: { type: 'default' }
                                },
                                {
                                    title: 'Controllo pressione',
                                    start: '2025-06-05T10:00:00',
                                    color: '#F59E0B',
                                    extendedProps: { type: 'default' }
                                }
                            ];

                            // Aggiorna card del prossimo appuntamento
                            updateNextAppointmentCard(formattedEvents);
                            
                            // Aggiorna anche l'elenco promemorie
                            loadReminders();

                            successCallback([...formattedEvents, ...defaultEvents]);
                        })
                        .catch(error => {
                            console.error('Errore nel recupero degli eventi:', error);
                            // Eventi predefiniti come fallback
                            const defaultEvents = [
                                {
                                    title: 'Ritiro farmaci',
                                    start: '2025-05-25',
                                    color: '#52B788',
                                    extendedProps: { type: 'default' }
                                },
                                {
                                    title: 'Consulto farmacista',
                                    start: '2025-05-28T15:30:00',
                                    color: '#4F46E5',
                                    extendedProps: { type: 'default' }
                                },
                                {
                                    title: 'Controllo pressione',
                                    start: '2025-06-05T10:00:00',
                                    color: '#F59E0B',
                                    extendedProps: { type: 'default' }
                                }
                            ];
                            successCallback(defaultEvents);
                        });
                },

                // Gestione del click su un evento
                eventClick: function (info) {
                    // Salva il riferimento all'evento corrente
                    currentEvent = info.event;

                    // Ottieni lo stato dell'evento
                    const status = info.event.extendedProps?.status || 'default';

                    // Popola il modal con i dati dell'evento
                    document.getElementById('eventModalTitle').innerHTML = '<i class="fa-solid fa-calendar-day"></i> Dettagli Evento';

                    // Formatta la data e l'ora in formato leggibile
                    const eventDate = info.event.start;
                    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };
                    document.getElementById('eventDateTime').innerText = eventDate.toLocaleDateString('it-IT', options);

                    // Imposta la descrizione
                    document.getElementById('eventDescription').innerText = info.event.title;

                    // Imposta lo stato dell'evento
                    document.getElementById('eventStatus').innerHTML = getStatusText(status);

                    // Imposta anche i valori nei campi di modifica
                    document.getElementById('editEventDate').value = formatDateForInput(eventDate);
                    document.getElementById('editEventDescription').value = info.event.title;

                    // Se è un evento predefinito o rifiutato, disabilita l'eliminazione e la modifica
                    const isDefaultEvent = info.event.extendedProps && info.event.extendedProps.type === 'default';
                    const isRejected = status === 'rejected';
                    document.getElementById('deleteEventBtn').style.display = (isDefaultEvent || isRejected) ? 'none' : 'flex';
                    document.getElementById('editEventBtn').style.display = (isDefaultEvent || isRejected) ? 'none' : 'flex';

                    // Mostra il modal in modalità visualizzazione
                    document.getElementById('eventViewMode').style.display = 'block';
                    document.getElementById('eventEditMode').style.display = 'none';
                    document.getElementById('eventModal').style.display = 'block';
                },

                // Gestione del click su una data
                dateClick: function (info) {
                    // Pre-popola il campo data con la data selezionata
                    document.getElementById('reminderDate').value = info.dateStr + 'T12:00'; // Imposta mezzogiorno come ora predefinita
                    openReminderModalSafe();
                }
            });

            // Renderizza il calendario
            calendar.render();
            
            // Carica i promemoria iniziali
            setTimeout(loadReminders, 500);

            // Funzione per aggiornare la card del prossimo appuntamento
            function updateNextAppointmentCard(events) {
                // Filtra solo gli eventi approvati o gli eventi predefiniti
                const relevantEvents = events.filter(event =>
                    event.extendedProps.status === 'approved' ||
                    event.extendedProps.type === 'default'
                );

                // Ordina gli eventi per data
                relevantEvents.sort((a, b) => new Date(a.start) - new Date(b.start));

                // Trova il prossimo evento rispetto a oggi
                const today = new Date();
                const nextEvent = relevantEvents.find(event => new Date(event.start) > today);

                if (nextEvent) {
                    const eventDate = new Date(nextEvent.start);

                    // Formatta la data
                    const options = { day: 'numeric', month: 'long', hour: '2-digit', minute: '2-digit' };
                    const formattedDate = eventDate.toLocaleDateString('it-IT', options);

                    // Calcola i giorni rimanenti
                    const diffTime = Math.abs(eventDate - today);
                    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                    // Aggiorna la card
                    document.getElementById('nextAppointment').textContent = `La tua prossima visita è programmata per il ${formattedDate}`;
                    document.getElementById('appointmentDaysLeft').textContent = diffDays === 0 ? 'Oggi' :
                        diffDays === 1 ? 'Domani' :
                            `Tra ${diffDays} giorni`;
                }
            }

            // Funzione per formattare la data nel formato richiesto dall'input datetime-local
            function formatDateForInput(date) {
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                const hours = String(date.getHours()).padStart(2, '0');
                const minutes = String(date.getMinutes()).padStart(2, '0');

                return `${year}-${month}-${day}T${hours}:${minutes}`;
            }

            // Configurazione del modal per nuovo promemoria
            const reminderModal = document.getElementById('reminderModal');
            const newReminderBtn = document.getElementById('newReminderBtn');
            const closeReminderModalBtn = document.getElementById('closeReminderModal');
            const cancelReminderBtn = document.getElementById('cancelReminder');
            const reminderForm = document.getElementById('reminderForm');
            const reminderDate = document.getElementById('reminderDate');
            const reminderDescription = document.getElementById('reminderDescription');

            // Imposta la data di default a oggi
            const today = new Date();
            const formattedDate = formatDateForInput(today);
            reminderDate.value = formattedDate;

            // Funzione per aprire il modal del promemoria in sicurezza
            function openReminderModalSafe() {
                console.log("Apertura modal promemoria");
                const modal = document.getElementById('reminderModal');
                if (!modal) {
                    console.error('Modal non trovato!');
                    return;
                }
                
                // Mostra il modal
                modal.style.display = 'block';
                
                // Focus sul campo descrizione (dopo breve delay per sicurezza)
                setTimeout(() => {
                    const descField = document.getElementById('reminderDescription');
                    if (descField) descField.focus();
                }, 100);
            }

            // Funzione per chiudere il modal del promemoria
            function closeReminderModal() {
                reminderModal.style.display = 'none';
                // Reset del form
                reminderForm.reset();
                reminderDate.value = formattedDate;
            }
            
            // Esponi la funzione globalmente
            window.closeReminderModal = closeReminderModal;
            window.openReminderModalSafe = openReminderModalSafe;

            // Event listeners per aprire/chiudere il modal del promemoria
            newReminderBtn.addEventListener('click', function(event) {
                event.preventDefault();
                event.stopPropagation();
                openReminderModalSafe();
            });
            
            closeReminderModalBtn.addEventListener('click', closeReminderModal);
            cancelReminderBtn.addEventListener('click', closeReminderModal);

            // Gestione del form di promemoria
            reminderForm.addEventListener('click', function(event) {
                event.stopPropagation(); // Previene la propagazione del click
            });

            // Gestione del submit per creare un nuovo promemoria
            reminderForm.addEventListener('submit', function (e) {
                e.preventDefault();

                // Recupera i valori dal form
                const date = reminderDate.value;
                const description = reminderDescription.value;

                // Verifica che i dati siano validi
                if (!date || !description) {
                    alert('Per favore compila tutti i campi');
                    return;
                }

                // Mostra indicatore di caricamento
                const saveButton = reminderForm.querySelector('button[type="submit"]');
                const originalText = saveButton.innerHTML;
                saveButton.disabled = true;
                saveButton.innerHTML = '<i class="fa-solid fa-spinner spinner"></i> Salvataggio...';

                // Invia la richiesta al server
                fetch('/api/calendar-events', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify({
                        title: description,
                        start: date,
                        status: 'pending'
                    })
                })
                .then(response => {
                    // Ripristina il pulsante
                    saveButton.disabled = false;
                    saveButton.innerHTML = originalText;

                    if (!response.ok) {
                        return response.json().then(data => {
                            throw new Error(data.error || 'Errore nel salvare il promemoria');
                        });
                    }
                    return response.json();
                })
                .then(savedEvent => {
                    console.log('Promemoria salvato:', savedEvent);
                    
                    // Chiudi il modal
                    closeReminderModal();

                    // Aggiungi l'evento al calendario e applica il colore corretto
                    calendar.addEvent({
                        id: savedEvent.id,
                        title: description,
                        start: date,
                        color: getEventColor('pending'), // Arancione per promemorie in attesa
                        extendedProps: {
                            status: 'pending',
                            type: 'user_reminder'
                        }
                    });

                    // Mostra messaggio di successo
                    const successAlert = document.getElementById('successAlert');
                    successAlert.style.display = 'flex';
                    setTimeout(() => {
                        successAlert.style.display = 'none';
                    }, 5000);

                    // Aggiorna l'elenco promemorie
                    loadReminders();
                })
                .catch(error => {
                    console.error('Errore:', error);
                    
                    // Mostra l'avviso appropriato
                    if (error.message.includes('posti disponibili')) {
                        document.getElementById('limitAlert').textContent = 'Non ci sono più posti disponibili per questa data. Scegli un altro giorno.';
                        document.getElementById('limitAlert').style.display = 'flex';
                        setTimeout(() => {
                            document.getElementById('limitAlert').style.display = 'none';
                        }, 5000);
                    } else {
                        alert(`Si è verificato un errore: ${error.message || 'Controlla la connessione di rete'}`);
                    }
                });
            });

                        // Configurazione del modal per la gestione eventi
            const eventModal = document.getElementById('eventModal');
            const closeEventModalBtn = document.getElementById('closeEventModal');
            const deleteEventBtn = document.getElementById('deleteEventBtn');
            const editEventBtn = document.getElementById('editEventBtn');
            const cancelEditBtn = document.getElementById('cancelEdit');
            const editEventForm = document.getElementById('editEventForm');
            const eventViewMode = document.getElementById('eventViewMode');
            const eventEditMode = document.getElementById('eventEditMode');

            // Funzione per chiudere il modal degli eventi
            function closeEventModal() {
                eventModal.style.display = 'none';
            }

            // Event listener per chiudere il modal degli eventi
            closeEventModalBtn.addEventListener('click', closeEventModal);

            // Chiudi il modal se l'utente clicca fuori da esso
            window.addEventListener('click', (event) => {
                if (event.target === eventModal) {
                    closeEventModal();
                }
            });

            // Event listener per passare alla modalità di modifica
            editEventBtn.addEventListener('click', function () {
                eventViewMode.style.display = 'none';
                eventEditMode.style.display = 'block';
            });

            // Event listener per tornare alla modalità di visualizzazione
            cancelEditBtn.addEventListener('click', function () {
                eventViewMode.style.display = 'block';
                eventEditMode.style.display = 'none';
            });

            // Event listener per eliminare un evento
            deleteEventBtn.addEventListener('click', function () {
                if (confirm('Sei sicuro di voler eliminare questo evento?')) {
                    if (currentEvent) {
                        const eventId = currentEvent.id;

                        if (!eventId) {
                            alert('Impossibile eliminare questo evento.');
                            return;
                        }

                        // Mostra indicatore di caricamento
                        deleteEventBtn.innerHTML = '<i class="fa-solid fa-spinner spinner"></i> Eliminazione...';
                        deleteEventBtn.disabled = true;

                        // Elimina l'evento dal server
                        fetch(`/api/calendar-events/${eventId}`, {
                            method: 'DELETE',
                            credentials: 'include'
                        })
                        .then(response => {
                            // Ripristina il pulsante
                            deleteEventBtn.innerHTML = '<i class="fa-solid fa-trash-can"></i> Elimina';
                            deleteEventBtn.disabled = false;

                            if (!response.ok) {
                                throw new Error('Errore nell\'eliminare l\'evento');
                            }
                            return response.json();
                        })
                        .then(() => {
                            // Rimuovi l'evento dal calendario
                            currentEvent.remove();
                            
                            // Chiudi il modal
                            closeEventModal();

                            // Mostra messaggio di successo
                            const successAlert = document.getElementById('successAlert');
                            successAlert.innerHTML = '<i class="fa-solid fa-check-circle"></i> Promemoria eliminato con successo!';
                            successAlert.style.display = 'flex';
                            setTimeout(() => {
                                successAlert.style.display = 'none';
                            }, 5000);

                            // Aggiorna l'elenco promemorie
                            loadReminders();
                        })
                        .catch(error => {
                            console.error('Errore nell\'eliminare l\'evento:', error);
                            alert('Si è verificato un errore nell\'eliminare l\'evento. Riprova più tardi.');
                        });
                    }
                }
            });

            // Event listener per salvare le modifiche a un evento
            editEventForm.addEventListener('submit', function (e) {
                e.preventDefault();

                if (currentEvent) {
                    // Ottieni i nuovi valori
                    const newDate = document.getElementById('editEventDate').value;
                    const newDescription = document.getElementById('editEventDescription').value;
                    const eventId = currentEvent.id;

                    if (!eventId) {
                        alert('Impossibile modificare questo evento.');
                        return;
                    }

                    // Mostra indicatore di caricamento
                    const saveButton = editEventForm.querySelector('button[type="submit"]');
                    const originalText = saveButton.innerHTML;
                    saveButton.disabled = true;
                    saveButton.innerHTML = '<i class="fa-solid fa-spinner spinner"></i> Aggiornamento...';

                    // Aggiorna l'evento nel server
                    fetch(`/api/calendar-events/${eventId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        credentials: 'include',
                        body: JSON.stringify({
                            title: newDescription,
                            start: newDate
                        })
                    })
                    .then(response => {
                        // Ripristina il pulsante
                        saveButton.disabled = false;
                        saveButton.innerHTML = originalText;
                        
                        if (!response.ok) {
                            throw new Error('Errore nell\'aggiornare l\'evento');
                        }
                        return response.json();
                    })
                    .then((updatedEvent) => {
                        // Aggiorna l'evento nel calendario
                        currentEvent.setProp('title', newDescription);
                        currentEvent.setStart(newDate);
                        currentEvent.setProp('color', getEventColor('pending')); // Ripristina lo stato in pending

                        // Chiudi il modal
                        closeEventModal();

                        // Mostra messaggio di successo
                        const successAlert = document.getElementById('successAlert');
                        successAlert.innerHTML = '<i class="fa-solid fa-check-circle"></i> Promemoria aggiornato con successo! In attesa di approvazione.';
                        successAlert.style.display = 'flex';
                        setTimeout(() => {
                            successAlert.style.display = 'none';
                        }, 5000);

                        // Aggiorna l'elenco promemorie
                        loadReminders();
                    })
                    .catch(error => {
                        console.error('Errore nell\'aggiornare l\'evento:', error);
                        alert('Si è verificato un errore nell\'aggiornare l\'evento. Riprova più tardi.');
                    });
                }
            });
            
            // Esponi la funzione di caricamento promemorie globalmente
            window.loadReminders = loadReminders;

            // Configurazione della chat
            setupChat();

            // Inizializzazione del contatore visitatori
            setupVisitorCounter();
        });

        // Funzione di logout
        function logout() {
            fetch('/logout', {
                method: 'POST',
                credentials: 'include'
            })
            .then(() => {
                localStorage.removeItem('jwtToken'); // Rimuovi anche il token JWT
                window.location.href = '/';  // Redirect alla homepage dopo il logout
            })
            .catch(error => {
                console.error('Errore durante il logout:', error);
                window.location.href = '/';  // Redirect alla homepage anche in caso di errore
            });
        }

        // Funzione di configurazione della chat
        function setupChat() {
            const chatIcon = document.getElementById('chatIcon');
            const chatFloatBtn = document.querySelector('.chat-float-btn');
            const chatWindow = document.getElementById('chatWindow');
            const closeChat = document.getElementById('closeChat');
            const chatInput = document.getElementById('chatInput');
            const sendButton = document.getElementById('sendMessage');
            const chatBody = document.getElementById('chatBody');
            const chatBadge = document.createElement('div'); 
            
            if (chatFloatBtn) {
                chatBadge.id = 'chatBadge';
                chatBadge.style.display = 'none';
                chatBadge.className = 'chat-badge';
                chatFloatBtn.appendChild(chatBadge);
            }

            // Messaggi predefiniti del farmacista
            const pharmacistResponses = [
                "In cosa posso esserti d'aiuto oggi?",
                "Hai bisogno di informazioni sui tuoi farmaci?",
                "Vuoi fissare un appuntamento per un consulto?",
                "Ti ricordo che il tuo prossimo controllo è previsto per la prossima settimana.",
                "I tuoi esami sono pronti, puoi passare a ritirarli quando preferisci.",
                "Il farmaco che hai richiesto è disponibile da oggi.",
                "Ti consiglio di assumere il farmaco dopo i pasti principali."
            ];

            let unreadMessages = 0;
            let chatOpen = false;

            // Gestione apertura e chiusura della finestra di chat
            function openChat() {
                if (!chatWindow) return;
                chatWindow.style.display = 'flex';
                chatOpen = true;
                unreadMessages = 0;
                chatBadge.style.display = 'none';
                chatBadge.textContent = '0';
                setTimeout(() => chatInput && chatInput.focus(), 100);
            }

            if (chatIcon) chatIcon.addEventListener('click', openChat);
            if (chatFloatBtn) chatFloatBtn.addEventListener('click', openChat);
            if (closeChat) {
                closeChat.addEventListener('click', () => {
                    chatWindow.style.display = 'none';
                    chatOpen = false;
                });
            }

            // Link alla pagina di chat dalla dashboard
            const messageCardFooter = document.querySelector('.dashboard-card:nth-child(3) .dashboard-card-footer');
            if (messageCardFooter) {
                messageCardFooter.addEventListener('click', () => {
                    window.location.href = '/chat';
                });
            }

            // Simulazione di un messaggio dopo un po' di tempo
            setTimeout(() => {
                if (chatBadge && !chatOpen) {
                    unreadMessages++;
                    chatBadge.textContent = unreadMessages;
                    chatBadge.style.display = 'flex';
                }
            }, 20000);
        }

        // Versione migliorata per il contatore visitatori con animazione
        function setupVisitorCounter() {
            const visitorCountElement = document.getElementById('visitorCount');
            if (!visitorCountElement) return;
            
            // Imposta un valore iniziale
            visitorCountElement.textContent = "1";
            
            // Simula un aumento del contatore con animazione
            setInterval(() => {
                const currentCount = parseInt(visitorCountElement.textContent);
                if (Math.random() > 0.7) {
                    const newCount = Math.min(currentCount + 1, 5);
                    
                    // Animazione quando aumenta il numero di visitatori
                    visitorCountElement.classList.add('visitor-pulse');
                    visitorCountElement.textContent = newCount;
                    
                    setTimeout(() => {
                        visitorCountElement.classList.remove('visitor-pulse');
                    }, 1000);
                }
                else if (Math.random() > 0.9 && currentCount > 1) {
                    // Occasionalmente diminuisci il contatore (utente disconnesso)
                    visitorCountElement.textContent = currentCount - 1;
                }
            }, 15000);
        }
        
        // Aggiungi una data dinamica alla navbar per mostrare la data corrente
        document.addEventListener('DOMContentLoaded', function() {
            // Inserisci la data odierna formattata
            const oggi = new Date();
            const opzioniData = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
            const dataFormattata = oggi.toLocaleDateString('it-IT', opzioniData);
            
            // Rendi interattivi tutti i link nelle card della dashboard
            const cardFooters = document.querySelectorAll('.dashboard-card-footer');
            cardFooters.forEach(footer => {
                footer.addEventListener('click', function() {
                    // Aggiungi effetto ripple al click
                    this.style.position = 'relative';
                    const ripple = document.createElement('span');
                    ripple.classList.add('ripple-effect');
                    this.appendChild(ripple);
                    
                    // Rimuovi l'elemento dopo l'animazione
                    setTimeout(() => ripple.remove(), 600);
                });
            });
        });
    </script>
</body>
</html>