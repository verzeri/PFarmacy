<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PFarmacy - Pannello Amministratore</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="style.css">
    <style>
        .admin-header {
            background-color: #3a5795;
            color: white;
            padding: 20px;
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-radius: 5px;
        }

        .users-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        .users-table th, .users-table td {
            padding: 12px 15px;
            border-bottom: 1px solid #ddd;
            text-align: left;
        }

        .users-table th {
            background-color: #f8f9fa;
            font-weight: bold;
        }

        .users-table tr:hover {
            background-color: #f1f1f1;
        }

        .action-buttons button {
            margin-right: 5px;
            padding: 5px 10px;
            border: none;
            border-radius: 3px;
            cursor: pointer;
        }

        .edit-btn {
            background-color: #ffc107;
            color: black;
        }

        .delete-btn {
            background-color: #dc3545;
            color: white;
        }

        .admin-badge {
            background-color: #28a745;
            color: white;
            padding: 3px 8px;
            border-radius: 20px;
            font-size: 0.8em;
        }

        .user-badge {
            background-color: #6c757d;
            color: white;
            padding: 3px 8px;
            border-radius: 20px;
            font-size: 0.8em;
        }

        .logout-btn {
            background-color: #dc3545;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
        }

        .filter-controls {
            margin-bottom: 20px;
        }

        .user-modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 500px;
            border-radius: 5px;
        }

        .close-modal {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .form-group input, .form-group select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="admin-header">
            <h1><i class="fas fa-user-shield"></i> Pannello Amministratore</h1>
            <div>
                <span id="adminName">{{ admin.nome }}</span>
                <button id="logoutBtn" class="logout-btn"><i class="fas fa-sign-out-alt"></i> Logout</button>
            </div>
        </div>

        <div class="filter-controls">
            <h2>Gestione Utenti</h2>
            <div>
                <button onclick="fetchAllUsers()">Tutti gli Utenti</button>
                <button onclick="filterUsers('user')">Solo Utenti</button>
                <button onclick="addNewUser()">Aggiungi Nuovo Utente</button>
            </div>
        </div>

        <table class="users-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Nome</th>
                    <th>Cognome</th>
                    <th>Email</th>
                    <th>Sesso</th>
                    <th>Età</th>
                    <th>Ruolo</th>
                    <th>Azioni</th>
                </tr>
            </thead>
            <tbody id="usersTableBody">
                {{#each users}}
                <tr>
                    <td>{{ id }}</td>
                    <td>{{ nome }}</td>
                    <td>{{ cognome }}</td>
                    <td>{{ email }}</td>
                    <td>{{ sesso }}</td>
                    <td>{{ eta }}</td>
                    <td><span class="{{#if (eq ruolo 'admin')}}admin-badge{{else}}user-badge{{/if}}">{{ ruolo }}</span></td>
                    <td class="action-buttons">
                        <button class="edit-btn" onclick="editUser({{ id }})">
                            <i class="fas fa-edit"></i> Modifica
                        </button>
                        <button class="delete-btn" onclick="deleteUser({{ id }})">
                            <i class="fas fa-trash"></i> Elimina
                        </button>
                    </td>
                </tr>
                {{/each}}
            </tbody>
        </table>

        <div id="userModal" class="user-modal">
            <div class="modal-content">
                <span class="close-modal" onclick="closeModal()">&times;</span>
                <h2 id="modalTitle">Modifica Utente</h2>
                <form id="userForm">
                    <input type="hidden" id="userId">
                    <div class="form-group">
                        <label for="userNome">Nome:</label>
                        <input type="text" id="userNome" required>
                    </div>
                    <div class="form-group">
                        <label for="userCognome">Cognome:</label>
                        <input type="text" id="userCognome" required>
                    </div>
                    <div class="form-group">
                        <label for="userEmail">Email:</label>
                        <input type="email" id="userEmail" required>
                    </div>
                    <div class="form-group">
                        <label for="userSesso">Sesso:</label>
                        <select id="userSesso" required>
                            <option value="M">Maschio</option>
                            <option value="F">Femmina</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="userEta">Età:</label>
                        <input type="number" id="userEta" required min="1">
                    </div>
                    <div class="form-group">
                        <label for="userRuolo">Ruolo:</label>
                        <select id="userRuolo" required>
                            <option value="user">Utente</option>
                            <option value="admin">Amministratore</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="userPassword">Password:</label>
                        <input type="password" id="userPassword" placeholder="Lascia vuoto per mantenere la password attuale">
                    </div>
                    <button type="submit">Salva Modifiche</button>
                </form>
            </div>
        </div>
    </div>

    <script>
        // Verificare se l'utente è un amministratore
        document.addEventListener('DOMContentLoaded', function() {
            // Controlla se l'utente è autenticato e ha il ruolo di admin
            fetch('/api/check-auth', {
                method: 'GET',
                credentials: 'include'
            })
            .then(response => response.json())
            .then(data => {
                if (!data.isAuthenticated || data.role !== 'admin') {
                    // Reindirizza a index.html se non è un admin
                    window.location.href = 'index.html';
                } else {
                    // Mostra il nome dell'admin
                    document.getElementById('adminName').textContent = data.nome || 'Admin';
                    // Carica gli utenti
                    fetchAllUsers();
                }
            })
            .catch(error => {
                console.error('Errore di autenticazione:', error);
                window.location.href = 'index.html';
            });
        });

        // Recupera tutti gli utenti
        function fetchAllUsers() {
            fetch('/utentii')
            .then(response => response.json())
            .then(data => {
                displayUsers(data.users);
            })
            .catch(error => {
                console.error('Errore durante il recupero degli utenti:', error);
                alert('Si è verificato un errore nel caricamento degli utenti.');
            });
        }

        // Filtra gli utenti per ruolo
        function filterUsers(role) {
            fetch('/utentii')
            .then(response => response.json())
            .then(data => {
                const filteredUsers = data.users.filter(user => user.ruolo === role);
                displayUsers(filteredUsers);
            })
            .catch(error => {
                console.error('Errore durante il filtraggio degli utenti:', error);
                alert('Si è verificato un errore nel filtraggio degli utenti.');
            });
        }

        // Visualizza gli utenti nella tabella
        function displayUsers(users) {
            const tableBody = document.getElementById('usersTableBody');
            tableBody.innerHTML = '';

            users.forEach(user => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${user.id}</td>
                    <td>${user.nome}</td>
                    <td>${user.cognome}</td>
                    <td>${user.email}</td>
                    <td>${user.sesso}</td>
                    <td>${user.eta}</td>
                    <td><span class="${user.ruolo === 'admin' ? 'admin-badge' : 'user-badge'}">${user.ruolo}</span></td>
                    <td class="action-buttons">
                        <button class="edit-btn" onclick="editUser(${user.id})">
                            <i class="fas fa-edit"></i> Modifica
                        </button>
                        <button class="delete-btn" onclick="deleteUser(${user.id})">
                            <i class="fas fa-trash"></i> Elimina
                        </button>
                    </td>
                `;
                tableBody.appendChild(row);
            });
        }

        // Apre il modale per aggiungere un nuovo utente
        function addNewUser() {
            document.getElementById('modalTitle').textContent = 'Aggiungi Nuovo Utente';
            document.getElementById('userForm').reset();
            document.getElementById('userId').value = '';
            document.getElementById('userPassword').required = true;
            document.getElementById('userModal').style.display = 'block';
        }

        // Apre il modale per modificare un utente esistente
        function editUser(userId) {
            document.getElementById('modalTitle').textContent = 'Modifica Utente';
            document.getElementById('userId').value = userId;
            document.getElementById('userPassword').required = false;

            // Recupera i dati dell'utente
            fetch(`/utentii/${userId}`)
            .then(response => response.json())
            .then(user => {
                document.getElementById('userNome').value = user.nome;
                document.getElementById('userCognome').value = user.cognome;
                document.getElementById('userEmail').value = user.email;
                document.getElementById('userSesso').value = user.sesso;
                document.getElementById('userEta').value = user.eta;
                document.getElementById('userRuolo').value = user.ruolo;
                document.getElementById('userPassword').value = '';

                document.getElementById('userModal').style.display = 'block';
            })
            .catch(error => {
                console.error('Errore durante il recupero dei dati utente:', error);
                alert('Si è verificato un errore nel recupero dei dati utente.');
            });
        }

        // Chiude il modale
        function closeModal() {
            document.getElementById('userModal').style.display = 'none';
        }

        // Elimina un utente
        function deleteUser(userId) {
            if (confirm('Sei sicuro di voler eliminare questo utente?')) {
                fetch(`/utentii/${userId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Utente eliminato con successo.');
                        fetchAllUsers();
                    } else {
                        alert('Errore durante l\'eliminazione dell\'utente.');
                    }
                })
                .catch(error => {
                    console.error('Errore durante l\'eliminazione dell\'utente:', error);
                    alert('Si è verificato un errore durante l\'eliminazione dell\'utente.');
                });
            }
        }

        // Gestisce l'invio del form utente (aggiunta/modifica)
        document.getElementById('userForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const userId = document.getElementById('userId').value;
            const userData = {
                nome: document.getElementById('userNome').value,
                cognome: document.getElementById('userCognome').value,
                email: document.getElementById('userEmail').value,
                sesso: document.getElementById('userSesso').value,
                eta: parseInt(document.getElementById('userEta').value),
                ruolo: document.getElementById('userRuolo').value
            };

            const password = document.getElementById('userPassword').value;
            if (password) {
                userData.password = password;
            }

            // Determina se è un'aggiunta o una modifica
            const method = userId ? 'PUT' : 'POST';
            const url = userId ? `/utentii/${userId}` : '/utentii';

            fetch(url, {
                method: method,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(userData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success || data.message) {
                    alert(userId ? 'Utente aggiornato con successo.' : 'Utente aggiunto con successo.');
                    closeModal();
                    fetchAllUsers();
                } else {
                    alert('Errore: ' + (data.error || 'Si è verificato un errore durante l\'operazione.'));
                }
            })
            .catch(error => {
                console.error('Errore durante l\'operazione:', error);
                alert('Si è verificato un errore durante l\'operazione.');
            });
        });

        // Gestisce il logout
        document.getElementById('logoutBtn').addEventListener('click', function() {
            fetch('/logout', {
                method: 'POST',
                credentials: 'include'
            })
            .then(() => {
                window.location.href = 'index.html';
            })
            .catch(error => {
                console.error('Errore durante il logout:', error);
                window.location.href = 'index.html';
            });
        });

        // Chiude il modale quando si clicca al di fuori di esso
        window.onclick = function(event) {
            const modal = document.getElementById('userModal');
            if (event.target == modal) {
                closeModal();
            }
        };
    </script>
</body>
</html>