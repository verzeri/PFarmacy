<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PFarmacy - Pannello Amministratore</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary: #3f6ad8;
            --primary-light: #e0e8ff;
            --secondary: #6c757d;
            --success: #3ac47d;
            --danger: #d92550;
            --warning: #f7b924;
            --info: #16aaff;
            --light: #f8f9fa;
            --dark: #343a40;
            --white: #ffffff;
            --shadow: 0 0.46875rem 2.1875rem rgba(4, 9, 20, 0.03), 
                       0 0.9375rem 1.40625rem rgba(4, 9, 20, 0.03), 
                       0 0.25rem 0.53125rem rgba(4, 9, 20, 0.05), 
                       0 0.125rem 0.1875rem rgba(4, 9, 20, 0.03);
            --border-radius: 0.25rem;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f5f6fa;
            color: #495057;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 1.5rem;
        }

        /* Header styles */
        .admin-header {
            background: linear-gradient(135deg, var(--primary) 0%, #5a8dee 100%);
            color: var(--white);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
        }

        .admin-header h1 {
            font-size: 1.75rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .admin-header i {
            font-size: 1.5rem;
        }

        .admin-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        #adminName {
            font-weight: 500;
            padding: 0.375rem 0.75rem;
            background-color: rgba(255, 255, 255, 0.2);
            border-radius: 1.5rem;
            font-size: 0.875rem;
        }

        .logout-btn {
            background-color: rgba(255, 255, 255, 0.15);
            color: var(--white);
            border: none;
            padding: 0.5rem 1rem;
            border-radius: var(--border-radius);
            cursor: pointer;
            font-weight: 500;
            transition: background-color 0.2s;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .logout-btn:hover {
            background-color: rgba(255, 255, 255, 0.25);
        }

        /* Filter controls */
        .panel-card {
            background-color: var(--white);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .filter-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .filter-controls h2 {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--dark);
            margin: 0;
        }

        .filter-buttons {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .filter-btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: var(--border-radius);
            background-color: var(--light);
            color: var(--dark);
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .filter-btn:hover {
            background-color: var(--primary-light);
            color: var(--primary);
        }

        .filter-btn.active {
            background-color: var(--primary);
            color: var(--white);
        }

        .add-btn {
            background-color: var(--success);
            color: var(--white);
        }

        .add-btn:hover {
            background-color: #2ea96a;
            color: var(--white);
        }

        /* Table styles */
        .users-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }

        .users-table th, .users-table td {
            padding: 1rem;
            text-align: left;
        }

        .users-table th {
            background-color: var(--primary-light);
            color: var(--primary);
            font-weight: 600;
            position: sticky;
            top: 0;
            border-bottom: 2px solid rgba(63, 106, 216, 0.2);
        }

        .users-table th:first-child {
            border-top-left-radius: var(--border-radius);
        }

        .users-table th:last-child {
            border-top-right-radius: var(--border-radius);
        }

        .users-table tr:nth-child(even) {
            background-color: rgba(245, 247, 250, 0.5);
        }

        .users-table tr:hover {
            background-color: var(--primary-light);
        }

        .users-table td {
            border-bottom: 1px solid #e9ecef;
        }

        .table-container {
            max-height: 600px;
            overflow-y: auto;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
        }

        /* Badges */
        .badge {
            padding: 0.25rem 0.75rem;
            border-radius: 1.5rem;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .admin-badge {
            background-color: var(--primary-light);
            color: var(--primary);
        }

        .user-badge {
            background-color: var(--light);
            color: var(--secondary);
        }

        /* Action buttons */
        .action-buttons {
            display: flex;
            gap: 0.5rem;
        }

        .btn {
            padding: 0.375rem 0.75rem;
            border: none;
            border-radius: var(--border-radius);
            cursor: pointer;
            font-size: 0.875rem;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.375rem;
            transition: all 0.2s ease;
        }

        .edit-btn {
            background-color: var(--warning);
            color: #212529;
        }

        .edit-btn:hover {
            background-color: #e5a91f;
        }

        .delete-btn {
            background-color: var(--danger);
            color: var(--white);
        }

        .delete-btn:hover {
            background-color: #c32148;
        }

        /* Modal styles */
        .user-modal {
            display: none;
            position: fixed;
            z-index: 100;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(4px);
        }

        .modal-content {
            background-color: var(--white);
            margin: 10% auto;
            padding: 2rem;
            border-radius: 0.5rem;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            width: 90%;
            max-width: 500px;
            animation: modalFadeIn 0.3s ease-out;
        }

        @keyframes modalFadeIn {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #e9ecef;
        }

        .modal-header h2 {
            font-size: 1.5rem;
            color: var(--dark);
            margin: 0;
        }

        .close-modal {
            color: var(--secondary);
            font-size: 1.75rem;
            font-weight: 700;
            cursor: pointer;
            transition: color 0.2s;
            line-height: 1;
        }

        .close-modal:hover {
            color: var(--danger);
        }

        .form-group {
            margin-bottom: 1.25rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--dark);
        }

        .form-control {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ced4da;
            border-radius: var(--border-radius);
            font-size: 1rem;
            transition: border-color 0.2s;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 0.2rem rgba(63, 106, 216, 0.25);
        }

        .form-actions {
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
            margin-top: 1.5rem;
        }

        .submit-btn {
            background-color: var(--primary);
            color: var(--white);
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: var(--border-radius);
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .submit-btn:hover {
            background-color: #345bc3;
        }

        .cancel-btn {
            background-color: var(--light);
            color: var(--dark);
            padding: 0.75rem 1.5rem;
            border: 1px solid #ced4da;
            border-radius: var(--border-radius);
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
        }

        .cancel-btn:hover {
            background-color: #e2e6ea;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .admin-header {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }

            .filter-controls {
                flex-direction: column;
                align-items: flex-start;
            }

            .users-table th, .users-table td {
                padding: 0.75rem 0.5rem;
                font-size: 0.875rem;
            }

            .action-buttons {
                flex-direction: column;
            }
        }

        /* Animation utilities */
        .fadeIn {
            animation: fadeIn 0.5s ease-in-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="admin-header">
            <h1><i class="fas fa-clinic-medical"></i> PFarmacy - Pannello Amministratore</h1>
            <div class="admin-info">
                <span id="adminName">{{ admin.nome }}</span>
                <button id="logoutBtn" class="logout-btn">
                    <i class="fas fa-sign-out-alt"></i> Logout
                </button>
            </div>
        </div>

        <div class="panel-card">
            <div class="filter-controls">
                <h2><i class="fas fa-users-cog"></i> Gestione Utenti</h2>
                <div class="filter-buttons">
                    <button id="allUsersBtn" class="filter-btn active" onclick="fetchAllUsers()">
                        <i class="fas fa-users"></i> Tutti gli Utenti
                    </button>
                    <button id="onlyUsersBtn" class="filter-btn" onclick="filterUsers('user')">
                        <i class="fas fa-user"></i> Solo Utenti
                    </button>
                    <button id="addUserBtn" class="filter-btn add-btn" onclick="addNewUser()">
                        <i class="fas fa-user-plus"></i> Aggiungi Utente
                    </button>
                </div>
            </div>
        </div>

        <div class="table-container fadeIn">
            <table class="users-table">
                <thead>
                    <tr>
                        <th><i class="fas fa-id-card"></i> ID</th>
                        <th><i class="fas fa-user"></i> Nome</th>
                        <th><i class="fas fa-user"></i> Cognome</th>
                        <th><i class="fas fa-envelope"></i> Email</th>
                        <th><i class="fas fa-venus-mars"></i> Sesso</th>
                        <th><i class="fas fa-birthday-cake"></i> Età</th>
                        <th><i class="fas fa-user-tag"></i> Ruolo</th>
                        <th><i class="fas fa-cogs"></i> Azioni</th>
                    </tr>
                </thead>
                <tbody id="usersTableBody">
                    {{#each users}}
                    <tr>
                        <td>{{ id }}</td>
                        <td>{{ nome }}</td>
                        <td>{{ cognome }}</td>
                        <td>{{ email }}</td>
                        <td>{{ sesso }}</td>
                        <td>{{ eta }}</td>
                        <td><span class="badge {{#if (eq ruolo 'admin')}}admin-badge{{else}}user-badge{{/if}}">{{ ruolo }}</span></td>
                        <td class="action-buttons">
                            <button class="btn edit-btn" onclick="editUser({{ id }})">
                                <i class="fas fa-edit"></i> Modifica
                            </button>
                            <button class="btn delete-btn" onclick="deleteUser({{ id }})">
                                <i class="fas fa-trash"></i> Elimina
                            </button>
                        </td>
                    </tr>
                    {{/each}}
                </tbody>
            </table>
        </div>

        <div id="userModal" class="user-modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 id="modalTitle">Modifica Utente</h2>
                    <span class="close-modal" onclick="closeModal()">&times;</span>
                </div>
                <form id="userForm">
                    <input type="hidden" id="userId">
                    <div class="form-group">
                        <label for="userNome">Nome:</label>
                        <input type="text" id="userNome" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label for="userCognome">Cognome:</label>
                        <input type="text" id="userCognome" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label for="userEmail">Email:</label>
                        <input type="email" id="userEmail" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label for="userSesso">Sesso:</label>
                        <select id="userSesso" class="form-control" required>
                            <option value="M">Maschio</option>
                            <option value="F">Femmina</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="userEta">Età:</label>
                        <input type="number" id="userEta" class="form-control" required min="1">
                    </div>
                    <div class="form-group">
                        <label for="userRuolo">Ruolo:</label>
                        <select id="userRuolo" class="form-control" required>
                            <option value="user">Utente</option>
                            <option value="admin">Amministratore</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="userPassword">Password:</label>
                        <input type="password" id="userPassword" class="form-control" placeholder="Lascia vuoto per mantenere la password attuale">
                    </div>
                    <div class="form-actions">
                        <button type="button" class="cancel-btn" onclick="closeModal()">Annulla</button>
                        <button type="submit" class="submit-btn">Salva Modifiche</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        // Verificare se l'utente è un amministratore
        document.addEventListener('DOMContentLoaded', function() {
            // Controlla se l'utente è autenticato e ha il ruolo di admin
            fetch('/api/check-auth', {
                method: 'GET',
                credentials: 'include'
            })
            .then(response => response.json())
            .then(data => {
                if (!data.isAuthenticated || data.role !== 'admin') {
                    // Reindirizza alla pagina principale se non è un admin
                    window.location.href = '/';
                } else {
                    // Mostra il nome dell'admin
                    document.getElementById('adminName').textContent = data.nome || 'Admin';
                    // Carica gli utenti
                    fetchAllUsers();
                }
            })
            .catch(error => {
                console.error('Errore di autenticazione:', error);
                window.location.href = '/';
            });
        });

        // Recupera tutti gli utenti
        function fetchAllUsers() {
            // Aggiorna classe attiva dei pulsanti
            document.getElementById('allUsersBtn').classList.add('active');
            document.getElementById('onlyUsersBtn').classList.remove('active');

            fetch('/utentii')
            .then(response => response.json())
            .then(data => {
                displayUsers(data.users);
            })
            .catch(error => {
                console.error('Errore durante il recupero degli utenti:', error);
                showNotification('Si è verificato un errore nel caricamento degli utenti.', 'error');
            });
        }

        // Filtra gli utenti per ruolo
        function filterUsers(role) {
            // Aggiorna classe attiva dei pulsanti
            document.getElementById('allUsersBtn').classList.remove('active');
            document.getElementById('onlyUsersBtn').classList.add('active');

            fetch('/utentii')
            .then(response => response.json())
            .then(data => {
                const filteredUsers = data.users.filter(user => user.ruolo === role);
                displayUsers(filteredUsers);
            })
            .catch(error => {
                console.error('Errore durante il filtraggio degli utenti:', error);
                showNotification('Si è verificato un errore nel filtraggio degli utenti.', 'error');
            });
        }

        // Visualizza gli utenti nella tabella
        function displayUsers(users) {
            const tableBody = document.getElementById('usersTableBody');
            tableBody.innerHTML = '';

            users.forEach(user => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${user.id}</td>
                    <td>${user.nome}</td>
                    <td>${user.cognome}</td>
                    <td>${user.email}</td>
                    <td>${user.sesso}</td>
                    <td>${user.eta}</td>
                    <td><span class="badge ${user.ruolo === 'admin' ? 'admin-badge' : 'user-badge'}">${user.ruolo}</span></td>
                    <td class="action-buttons">
                        <button class="btn edit-btn" onclick="editUser(${user.id})">
                            <i class="fas fa-edit"></i> Modifica
                        </button>
                        <button class="btn delete-btn" onclick="deleteUser(${user.id})">
                            <i class="fas fa-trash"></i> Elimina
                        </button>
                    </td>
                `;
                tableBody.appendChild(row);
            });

            // Aggiungi animazione di fade in
            document.querySelector('.table-container').classList.add('fadeIn');
        }

        // Mostra notifiche
        function showNotification(message, type = 'success') {
            alert(message); // Per ora utilizziamo alert, ma potrebbe essere sostituito con un sistema di notifiche più elegante
        }

        // Apre il modale per aggiungere un nuovo utente
        function addNewUser() {
            document.getElementById('modalTitle').textContent = 'Aggiungi Nuovo Utente';
            document.getElementById('userForm').reset();
            document.getElementById('userId').value = '';
            document.getElementById('userPassword').required = true;
            document.getElementById('userModal').style.display = 'block';
        }

        // Apre il modale per modificare un utente esistente
        function editUser(userId) {
            document.getElementById('modalTitle').textContent = 'Modifica Utente';
            document.getElementById('userId').value = userId;
            document.getElementById('userPassword').required = false;

            // Recupera i dati dell'utente
            fetch(`/utentii/${userId}`)
            .then(response => response.json())
            .then(user => {
                document.getElementById('userNome').value = user.nome;
                document.getElementById('userCognome').value = user.cognome;
                document.getElementById('userEmail').value = user.email;
                document.getElementById('userSesso').value = user.sesso;
                document.getElementById('userEta').value = user.eta;
                document.getElementById('userRuolo').value = user.ruolo;
                document.getElementById('userPassword').value = '';

                document.getElementById('userModal').style.display = 'block';
            })
            .catch(error => {
                console.error('Errore durante il recupero dei dati utente:', error);
                showNotification('Si è verificato un errore nel recupero dei dati utente.', 'error');
            });
        }

        // Chiude il modale
        function closeModal() {
            document.getElementById('userModal').style.display = 'none';
        }

        // Elimina un utente
        function deleteUser(userId) {
            if (confirm('Sei sicuro di voler eliminare questo utente?')) {
                fetch(`/utentii/${userId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showNotification('Utente eliminato con successo.');
                        fetchAllUsers();
                    } else {
                        showNotification('Errore durante l\'eliminazione dell\'utente.', 'error');
                    }
                })
                .catch(error => {
                    console.error('Errore durante l\'eliminazione dell\'utente:', error);
                    showNotification('Si è verificato un errore durante l\'eliminazione dell\'utente.', 'error');
                });
            }
        }

        // Gestisce l'invio del form utente (aggiunta/modifica)
        document.getElementById('userForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const userId = document.getElementById('userId').value;
            const userData = {
                nome: document.getElementById('userNome').value,
                cognome: document.getElementById('userCognome').value,
                email: document.getElementById('userEmail').value,
                sesso: document.getElementById('userSesso').value,
                eta: parseInt(document.getElementById('userEta').value),
                ruolo: document.getElementById('userRuolo').value
            };

            const password = document.getElementById('userPassword').value;
            if (password) {
                userData.password = password;
            }

            // Determina se è un'aggiunta o una modifica
            const method = userId ? 'PUT' : 'POST';
            const url = userId ? `/utentii/${userId}` : '/utentii';

            fetch(url, {
                method: method,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(userData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success || data.message) {
                    showNotification(userId ? 'Utente aggiornato con successo.' : 'Utente aggiunto con successo.');
                    closeModal();
                    fetchAllUsers();
                } else {
                    showNotification('Errore: ' + (data.error || 'Si è verificato un errore durante l\'operazione.'), 'error');
                }
            })
            .catch(error => {
                console.error('Errore durante l\'operazione:', error);
                showNotification('Si è verificato un errore durante l\'operazione.', 'error');
            });
        });

        // Gestisce il logout
        document.getElementById('logoutBtn').addEventListener('click', function() {
            fetch('/logout', {
                method: 'POST',
                credentials: 'include'
            })
            .then(() => {
                window.location.href = '/';
            })
            .catch(error => {
                console.error('Errore durante il logout:', error);
                window.location.href = '/';
            });
        });

        // Chiude il modale quando si clicca al di fuori di esso
        window.onclick = function(event) {
            const modal = document.getElementById('userModal');
            if (event.target == modal) {
                closeModal();
            }
        };
    </script>
</body>
</html>

